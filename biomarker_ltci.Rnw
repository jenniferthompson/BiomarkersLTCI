%% -- Specially formatted Latex comment tells RStudio to compile PDF with knitr
% !Rnw weave = knitr

\documentclass{article}

%\usepackage[margin=.5in, landscape]{geometry} %resets margins
\usepackage[margin=.5in]{geometry} %resets margins
\usepackage{hyperref}
\usepackage{lscape}
\usepackage{pdfpages}

\title{BRAIN-ICU: Biomarkers vs. Long-Term Cognitive and Functional Outcomes}
\date{\today}
\author{Jennifer Thompson, MPH; Supervisor: Rameela Chandrasekhar, PhD}
\begin{document}
\begin{landscape}
\maketitle
\tableofcontents
\clearpage

<<setup, include=FALSE, results='hide', cache=FALSE>>=
opts_chunk$set(echo=FALSE, warning = FALSE, message = FALSE, cache = FALSE, error = FALSE, results='hide')
options(replace.assign = TRUE, width = 90)

library(mice)
library(ClusterBootMultinom)
library(MASS)
library(pscl)
library(rms)
library(caTools)
library(ggplot2)
library(dplyr)
library(tidyr)

## -- Indicators for whether to completely rerun analyses, rerun imputed objects, and/or rerun -----
## -- models only ----------------------------------------------------------------------------------

## rerun.analyses should be one of "none", "models", "imputed", "all"
rerun.analyses <- 'all'

rerun.imputed <- rerun.models <- NULL
if(rerun.analyses == 'none'){
  rerun.imputed <- rerun.models <- FALSE
} else if(rerun.analyses == 'models'){
  rerun.imputed <- FALSE
  rerun.models <- TRUE
} else if(rerun.analyses == 'imputed'){
  rerun.imputed <- TRUE
  rerun.models <- FALSE
} else{
  rerun.imputed <- rerun.models <- TRUE
}

@

<<fxnsetup>>=
## -- Function to print model diagnostics ----------------------------------------------------------
ols.diagnostics <- function(model.obj, outcome.string, title.string){
  ## fit.mult.impute objects work differently than non-imputed objects; use residuals and fitted
  ##  values from model object directly rather than resid() and fitted()
  if('fit.mult.impute' %in% class(model.obj)){
    plot(model.obj$residuals ~ model.obj$fitted.values,
         xlab = paste('Predicted', outcome.string),
         ylab = paste('Model residual'),
         main = paste('RP plot,', title.string),
         col = 'turquoise4')
    abline(h = 0)
    qqnorm(model.obj$residuals, datax = TRUE, main = paste('Q-Q of residuals,', title.string))
  } else{
    plot(resid(model.obj) ~ fitted(model.obj),
         xlab = paste('Predicted', outcome.string),
         ylab = paste('Model residual'),
         main = paste('RP plot,', title.string),
         col = 'turquoise4')
    abline(h = 0)
    qqnorm(resid(model.obj), datax = TRUE, main = paste('Q-Q of residuals,', title.string))
  }
}

## -- Function to graphically examine proportional odds assumption ---------------------------------
po.assume <- function(model.obj,          ## model.obj: model of class lrm()
                      cuts,               ## cuts: sequence of points to cut outcome
                      plot.vars = NULL,   ## which variables to plot (defaults to all variables)
                      mfrow.auto = FALSE, ## whether to determine par(mfrow) automatically
                      model.data){        ## model.data: data used to fit model
  ## Create data set for each coefficient in main model
  cof.names <- names(coef(model.obj))
  all.rows <- 1:length(cof.names)
  int.rows <- grep('y>=', cof.names, fixed = TRUE)
  take.rows <- all.rows[all.rows %nin% int.rows]
  cof <- data.frame(var = cof.names[take.rows])

  ## Extract formula from model call
  comp.call <- as.character(formula(model.obj))
  model.outcome <- comp.call[2]
  model.formula <- comp.call[3]

  for(k in 1:length(cuts)){
    cut.mod <-
      lrm(as.formula(paste0('as.numeric(', model.outcome, ' >= ', cuts[k], ') ~ ', model.formula)),
          data = model.data)

    cof.temp <- data.frame(var = names(coef(cut.mod)),
                           hold.place = coef(cut.mod))

    cof <- merge(cof, cof.temp, all.x = TRUE, all.y = FALSE)
    names(cof) <- gsub('hold.place', paste('coef.cut', cuts[k], sep = '.'), names(cof))
  }

  ## Subset in case some splines didn't make requested number of knots
  cof <- cof[rowSums(is.na(cof[,2:ncol(cof)])) == 0,]

  ## If plot.vars is not null, take only rows for variables of interest
  if(!is.null(plot.vars)){
    cof <- cof[grep(plot.vars, cof$var),]
  }

  if(mfrow.auto){
    ## Get number of rows/columns for plot (plot as close to square as possible)
    plot.rows <- ceiling(sqrt(nrow(cof)))
    par(mfrow = c(plot.rows, plot.rows), mar = c(2, 4, 1, 1))
  }

  for(k in 1:nrow(cof)){
    plot(cuts, cof[k, 2:ncol(cof)], type = 'l', ylab = '')
    title(main = model.outcome)
    title(ylab = cof[k, 'var'], line = 2.5)
    abline(h = 0, lty = 2, col = 'red')
  }
}

## Create "fixed" versions of ols() and lrm() to work around bug w/ weights argument (thanks, Cole!)
ols.fix <- ols
trace(ols.fix, quote(m$weights <- substitute(weights)), at=9)

lrm.fix <- lrm
trace(lrm.fix, quote(m$weights <- substitute(weights)), at=9)

@

<<loaddata>>=
## Create vector of variable names of each biomarker
biomarker.vnames <- paste0(c('crp', 'ifngamma', 'il10', 'il12', 'il1b', 'il6', 'il8', 'mmp9',
                             'proteinc', 'tnfa', 'tnfr1'),
                           '.imp')

## Load all BRAIN data
if(Sys.info()['sysname'] == 'Darwin'){
  if(length(grep('Volumes', getwd())) > 0){
    load('/Volumes/thomps23/ICUDelirium/BRAINICU/braindata.Rdata')
    source('/Volumes/thomps23/R/multiplot.r')
    source('/Volumes/thomps23/R/rmsHelpers/model_results.R')
    source('/Volumes/thomps23/R/rmsHelpers/combine_cohorts.R')
    source('/Volumes/thomps23/R/rmsHelpers/latex_rms_results.R')
  } else{
    load('braindata.Rdata')
    source('multiplot.r')
    source('model_results.R')
    source('combine_cohorts.R')
    source('latex_rms_results.R')
  }
} else{
  load('/home/thomps23/ICUDelirium/BRAINICU/braindata.Rdata')
  source('/home/thomps23/R/multiplot.r')
  source('/home/thomps23/R/rmsHelpers/model_results.R')
  source('/home/thomps23/R/rmsHelpers/combine_cohorts.R')
  source('/home/thomps23/R/rmsHelpers/latex_rms_results.R')
}

## -- Insert data management to combine BRAIN, MIND data sets --------------------------------------

## For now...
all.oneobs <- brain.oneobs
all.daily <- brain.daily
all.fu <- brain.fu

## Create cube root versions of all mean 24h ICU drug variables
all.oneobs$mean.benz.cube <- all.oneobs$mean.benz.icu^(1/3)
all.oneobs$mean.op.cube <- all.oneobs$mean.op.new.icu^(1/3)
all.oneobs$mean.prop.cube <- all.oneobs$mean.prop.icu^(1/3)
all.oneobs$mean.dex.cube <- all.oneobs$mean.dex.icu^(1/3)
all.oneobs$mean.hal.cube <- all.oneobs$mean.hal.icu^(1/3)

label(all.oneobs$mean.benz.cube) <- 'Mean 24h benzos in ICU, cube root'
label(all.oneobs$mean.op.cube) <- 'Mean 24h opioids in ICU, cube root'
label(all.oneobs$mean.prop.cube) <- 'Mean 24h propofol in ICU, cube root'
label(all.oneobs$mean.dex.cube) <- 'Mean 24h dex in ICU, cube root'
label(all.oneobs$mean.hal.cube) <- 'Mean 24h haldol in ICU, cube root'

@

The following analyses examine the associations between a panel of \Sexpr{length(biomarker.vnames)}
biomarkers measured in the BRAIN-ICU and MIND-ICU cohorts and long-term cognitive and functional
outcomes.

\section{Cohort Definitions}
Cohorts are defined separately for each time point (3 and 12 months) and for cognitive and
functional outcomes, since patients could have at least some functional testing done by phone. To be
included in any analyses, patients must have had at least one biomarker measurement while in the
ICU. Patients are included in the cognitive cohort if they had at least one cognitive test performed
at the specified time point (including any RBANS domains, Trails A, Trails B and/or MMSE). Patients
are included in the functional cohort if they had at least one functional test performed at the
specified time point (BDI-II, PCL, ADL, FAQ, SF36 mental or physical component, and/or CSHA
frailty).

<<datamgmt>>=
## -- Indicator for whether patient has any biomarkers measured on any study day -------------------
all.daily$had.biomarker <- rowSums(!is.na(all.daily[,biomarker.vnames])) > 0
all.oneobs$had.biomarker <- all.oneobs$id %in% subset(all.daily, had.biomarker)$id

## -- Indicators for whether each patient is in cognitive or functional analysis cohort at ---------
## -- each time ------------------------------------------------------------------------------------

## Create vectors of tests included in "partial data" criteria at each time point for each cohort
cog.varnames <- c('rbans.global.score', 'rbans.immmemory.tscore', 'rbans.visuo.tscore',
                  'rbans.delayedmem.tscore', 'rbans.language.tscore', 'trail.a.tscore',
                  'trail.b.tscore', 'mmse.tscore')
func.varnames <- c('bdi.totscore', 'pcl.totscore', 'adl.totscore', 'faq.totscore',
                   'sf36.pcs', 'sf36.mcs', 'frailty.fu')

## Which patients/time points have at least partial cognitive or functional data?
all.fu$has.cog.data <- rowSums(!is.na(all.fu[,cog.varnames])) > 0
all.fu$has.func.data <- rowSums(!is.na(all.fu[,func.varnames])) > 0

## Indicators for complete vs. partial data
all.fu$complete.cog <- ifelse(!all.fu$has.cog.data, NA,
                              rowSums(!is.na(all.fu[,cog.varnames])) == length(cog.varnames))
all.fu$complete.func <- ifelse(!all.fu$has.func.data, NA,
                               rowSums(!is.na(all.fu[,func.varnames])) == length(func.varnames))

## Create indicators for whether patient is in cohort at each time
all.oneobs$cog.cohort.3 <- all.oneobs$had.biomarker &
  all.oneobs$id %in% subset(all.fu, fu.period == '3 Month' & has.cog.data)$id
all.oneobs$cog.cohort.12 <- all.oneobs$had.biomarker &
  all.oneobs$id %in% subset(all.fu, fu.period == '12 Month' & has.cog.data)$id
all.oneobs$func.cohort.3 <- all.oneobs$had.biomarker &
  all.oneobs$id %in% subset(all.fu, fu.period == '3 Month' & has.func.data)$id
all.oneobs$func.cohort.12 <- all.oneobs$had.biomarker &
  all.oneobs$id %in% subset(all.fu, fu.period == '12 Month' & has.func.data)$id

## Create indicators for whether patient is in each cohort at either time, for Table 1
all.oneobs$cog.cohort.either <- all.oneobs$cog.cohort.3 | all.oneobs$cog.cohort.12
all.oneobs$func.cohort.either <- all.oneobs$func.cohort.3 | all.oneobs$func.cohort.12

## -- Calculate summary values for each biomarker for each patient --------------------------------
bio.summary.pt <- all.daily[,c('id', 'study.day', biomarker.vnames)] %>%
  gather(key = bio.marker, value = bio.value, crp.imp:tnfr1.imp) %>%
  filter(!is.na(bio.value)) %>%
  arrange(id, study.day) %>%
  group_by(id, bio.marker) %>%
  summarise(pt.n = sum(!is.na(bio.value)),
            pt.mean = mean(bio.value, na.rm = TRUE),
            pt.min = min(bio.value, na.rm = TRUE),
            pt.max = max(bio.value, na.rm = TRUE),
            pt.first = head(bio.value, n = 1),
            pt.last = tail(bio.value, n = 1),
            pt.auc = trapz(x = study.day, y = bio.value)) %>%
  mutate(pt.mean.t = log10(pt.mean),
         pt.min.t = log10(pt.min),
         pt.max.t = log10(pt.max),
         pt.first.t = log10(pt.first),
         pt.last.t = log10(pt.last))
bio.summary.pt$pt.delta <- with(bio.summary.pt, ifelse(pt.n == 1, NA, pt.last - pt.first))
bio.summary.pt$pt.pctchg <-
  with(bio.summary.pt, ifelse(pt.n == 1, NA, ((pt.last - pt.first) / pt.first)))

## Transpose for one variable per summary measure per marker
bio.summary.wide <- bio.summary.pt %>%
  gather(key = 'measure', value = 'quantity', pt.n:pt.pctchg) %>%
  mutate(bio.vname = paste(gsub('\\.imp$', '', bio.marker),
                           gsub('^pt\\.', '', measure),
                           sep = '.')) %>%
  dplyr::select(-bio.marker, -measure) %>%
  spread(key = bio.vname, value = quantity)

## -- Calculate inverse probability weights for each survivor: ------------------------------------
## 1. Create aregImpute object to handle missing covariate data
## 2. Logistic regression, using "in cohort" as outcome
## 3. Get estimated probability for each person in cohort
## 4. Weight = 1 / estimated probability

## Create data set for imputation and modeling data
model.data <- subset(all.oneobs,
                     select = c(id, age.enroll, charlson.score, edu, iqcode.score.e, stroke.risk,
                                mean.benz.cube, mean.op.cube, mean.prop.cube, mean.dex.cube,
                                mean.hal.cube, adl.e, faq.e, frailty, icudays.sevseptic.s,
                                mean.modsofa.icu, del.s.imp, coma.s.imp, vent.los.tot.s,
                                cog.cohort.3, cog.cohort.12, func.cohort.3, func.cohort.12)) %>%
  left_join(bio.summary.wide, by = 'id')
dd <- datadist(model.data); options(datadist = 'dd')

## Create aregImpute object to use in weighting model
set.seed(1)
areg.weight <- aregImpute(~ age.enroll + charlson.score + I(edu) + I(iqcode.score.e) +
                            stroke.risk + mean.benz.cube + mean.op.cube + mean.prop.cube +
                            I(mean.dex.cube) + I(mean.hal.cube) + icudays.sevseptic.s + del.s.imp +
                            coma.s.imp + mean.modsofa.icu + crp.mean.t + ifngamma.mean.t +
                            il10.mean.t + il12.mean.t + il1b.mean.t + il6.mean.t + il8.mean.t +
                            mmp9.mean.t + proteinc.mean.t + tnfa.mean.t + tnfr1.mean.t,
                          n.impute = 10,
                          nk = 3,
                          data = model.data)

## Function to model P(being in cohort) using imputation
prob.cohort <- function(cohort.var){
  wtmod <- fit.mult.impute(formula = as.formula(paste(cohort.var,
                             "rcs(age.enroll, 3) + rcs(charlson.score, 3) + edu +
                              iqcode.score.e + rcs(stroke.risk, 3) +
                              rcs(mean.benz.cube, 3) + rcs(mean.op.cube, 3) +
                              rcs(mean.prop.cube, 3) + mean.dex.cube + mean.hal.cube +
                              rcs(icudays.sevseptic.s, 3) + rcs(del.s.imp, 3) +
                              rcs(coma.s.imp, 3) + rcs(mean.modsofa.icu, 3) +
                              rcs(crp.mean.t, 3) + rcs(ifngamma.mean.t, 3) +
                              rcs(il10.mean.t, 3) + rcs(il12.mean.t, 3) + rcs(il1b.mean.t, 3) +
                              rcs(il6.mean.t, 3) + il8.mean.t + rcs(mmp9.mean.t, 3) +
                              rcs(proteinc.mean.t, 3) + rcs(tnfa.mean.t, 3) +
                              rcs(tnfr1.mean.t, 3)",
                            sep = ' ~ ')),
                            fitter = lrm,
                            xtrans = areg.weight,
                            data = model.data)
  predict(wtmod, type = 'fitted')
}

prob.cog.3 <- prob.cohort('cog.cohort.3')
prob.cog.12 <- prob.cohort('cog.cohort.12')
prob.func.3 <- prob.cohort('func.cohort.3')
prob.func.12 <- prob.cohort('func.cohort.12')

## Final weights = inverse of P(being in cohort)
model.data$wt.cog.3 <- 1 / prob.cog.3
model.data$wt.cog.12 <- 1 / prob.cog.12
model.data$wt.func.3 <- 1 / prob.func.3
model.data$wt.func.12 <- 1 / prob.func.12

# ## Checks for weights
# sum(subset(model.data, cog.cohort.3)$wt.cog.3)
# sum(subset(model.data, cog.cohort.12)$wt.cog.12)
# sum(subset(model.data, func.cohort.3)$wt.func.3)
# sum(subset(model.data, func.cohort.12)$wt.func.12)

# ## Check using plots
# ggplot(aes(x = cog.cohort.12, y = prob.cog.12), data = model.data) + geom_boxplot() + scale_y_continuous(limits = 0:1)

## -- Create data set with all covariates, test scores, weights -----------------------------------
## Transpose followup scores
model.fu.data <- all.fu %>%
  filter(fu.period %in% c('3 Month', '12 Month')) %>%
  ## Create rounded version of FAQ score - negative binomial model can't handle non-integers
  ##  created by imputing missing questions
  mutate(faq.rdscore = round(faq.totscore)) %>%
  dplyr::select(id, fu.period, rbans.global.score, trail.b.tscore, adl.totscore,
                faq.totscore, faq.rdscore) %>%
  separate(fu.period, into = c('month', 'text'), sep = ' ') %>%
  gather(key = 'test', value = 'score', rbans.global.score:faq.rdscore) %>%
  mutate(test.month = paste(test, month, sep = '.')) %>%
  dplyr::select(-month, -text, -test) %>%
  spread(key = test.month, value = score)

## Create single data set
model.data <- model.data %>%
  left_join(model.fu.data, by = 'id')

## Add variable labels for tables
label(model.data$cog.cohort.3) <- 'In cognitive analysis cohort, 3m'
label(model.data$cog.cohort.12) <- 'In cognitive analysis cohort, 12m'
label(model.data$func.cohort.3) <- 'In functional analysis cohort, 3m'
label(model.data$func.cohort.12) <- 'In functional analysis cohort, 12m'
label(model.data$wt.cog.3) <- 'Model weight, cognitive cohort, 3m'
label(model.data$wt.cog.12) <- 'Model weight, cognitive cohort, 12m'
label(model.data$wt.func.3) <- 'Model weight, functional cohort, 3m'
label(model.data$wt.func.12) <- 'Model weight, functional cohort, 12m'
label(model.data$adl.totscore.3) <- 'ADL score, 3m'
label(model.data$adl.totscore.12) <- 'ADL score, 12m'
label(model.data$faq.totscore.3) <- 'FAQ score, 3m'
label(model.data$faq.totscore.12) <- 'FAQ score, 12m'
label(model.data$faq.rdscore.3) <- 'FAQ score (rounded), 3m'
label(model.data$faq.rdscore.12) <- 'FAQ score (rounded), 12m'
label(model.data$rbans.global.score.3) <- 'RBANS global score, 3m'
label(model.data$rbans.global.score.12) <- 'RBANS global score, 12m'
label(model.data$trail.b.tscore.3) <- 'Trails B T-score, 3m'
label(model.data$trail.b.tscore.12) <- 'Trails B T-score, 12m'

@

<<ptprogress>>=
## -- Create patient progress table (CONSORT info) -------------------------------------------------
## Create status variables at hospital discharge, 3- and 12-month followup; death is prioritized
##   over withdrawal, and having followup data is prioritized over a status of Deceased (in that
##   case, assume status is a typo)
all.oneobs$hosp.status <- with(all.oneobs, {
  factor(ifelse(!is.na(studywd.amt) &
                  studywd.amt %in% c('2. W/D from Participation and All Data Collected',
                                     '4. N/A Study Staff Withdrew Patient'), 1,
         ifelse(!is.na(died.inhosp) & died.inhosp == 'Died in hospital', 2,
         ifelse(!is.na(studywd.amt) | !is.na(studywd.date), 3,
         ifelse(!had.biomarker, 4, 5)))),
         levels = 1:5,
         labels = c('Withdrew and requested data be destroyed',
                    'Died in hospital',
                    'Withdrew in hospital',
                    'Survived hospital, but no biomarker measured',
                    'Survived with >=1 biomarker measured')) })

all.oneobs$three.status.cog <- with(all.oneobs, {
  factor(ifelse(hosp.status == 'Withdrew and requested data be destroyed', 1,
         ifelse(hosp.status == 'Died in hospital', 2,
         ifelse(hosp.status == 'Withdrew in hospital', 3,
         ifelse(hosp.status == 'Survived hospital, but no biomarker measured', 4,
         ifelse(cog.cohort.3 & id %in% subset(all.fu, fu.period == '3 Month' & complete.cog)$id, 9,
         ifelse(cog.cohort.3 & id %in% subset(all.fu, fu.period == '3 Month' & !complete.cog)$id, 8,
         ifelse(id %in% subset(all.fu, fu.period == '3 Month' & status == 'Deceased')$id, 5,
         ifelse(id %in% subset(all.fu,
                               fu.period == '3 Month' &
                                 status == 'Living-Withdrew from the study')$id,
                6,
         ifelse(hosp.status == 'Survived with >=1 biomarker measured' & !cog.cohort.3, 7,
                NA))))))))),
         levels = 1:9,
         labels = c('Withdrew and requested data be destroyed',
                    'Died in hospital',
                    'Withdrew in hospital',
                    'Survived hospital, but no biomarker measured',
                    'Died before 3-month followup',
                    'Withdrew before 3-month followup',
                    'Eligible for followup, but no cognitive data',
                    'Partial cognitive data',
                    'Complete cognitive data')) })

all.oneobs$three.status.func <- with(all.oneobs, {
  factor(ifelse(hosp.status == 'Withdrew and requested data be destroyed', 1,
         ifelse(hosp.status == 'Died in hospital', 2,
         ifelse(hosp.status == 'Withdrew in hospital', 3,
         ifelse(hosp.status == 'Survived hospital, but no biomarker measured', 4,
         ifelse(func.cohort.3 & id %in% subset(all.fu, fu.period == '3 Month' & complete.func)$id,
                9,
         ifelse(func.cohort.3 & id %in% subset(all.fu, fu.period == '3 Month' & !complete.func)$id,
                8,
         ifelse(id %in% subset(all.fu, fu.period == '3 Month' & status == 'Deceased')$id, 5,
         ifelse(id %in% subset(all.fu,
                               fu.period == '3 Month' &
                                 status == 'Living-Withdrew from the study')$id,
                6,
         ifelse(hosp.status == 'Survived with >=1 biomarker measured' & !func.cohort.3, 7,
                NA))))))))),
         levels = 1:9,
         labels = c('Withdrew and requested data be destroyed',
                    'Died in hospital',
                    'Withdrew in hospital',
                    'Survived hospital, but no biomarker measured',
                    'Died before 3-month followup',
                    'Withdrew before 3-month followup',
                    'Eligible for followup, but no functional data',
                    'Partial functional data',
                    'Complete functional data')) })

all.oneobs$twelve.status.cog <- with(all.oneobs, {
  factor(ifelse(hosp.status == 'Withdrew and requested data be destroyed', 1,
         ifelse(hosp.status == 'Died in hospital' |
                  three.status.cog == 'Died before 3-month followup', 2,
         ifelse(hosp.status == 'Withdrew in hospital' |
                  three.status.cog == 'Withdrew before 3-month followup', 3,
         ifelse(hosp.status == 'Survived hospital, but no biomarker measured', 4,
         ifelse(cog.cohort.12 & id %in% subset(all.fu, fu.period == '12 Month' & complete.cog)$id,
                9,
         ifelse(cog.cohort.12 & id %in% subset(all.fu, fu.period == '12 Month' & !complete.cog)$id,
                8,
         ifelse(id %in% subset(all.fu, fu.period == '12 Month' & status == 'Deceased')$id, 5,
         ifelse(id %in% subset(all.fu,
                               fu.period == '12 Month' &
                                 status == 'Living-Withdrew from the study')$id,
                6,
         ifelse(hosp.status == 'Survived with >=1 biomarker measured' & !cog.cohort.12, 7,
                NA))))))))),
         levels = 1:9,
         labels = c('Withdrew and requested data be destroyed',
                    'Died in hospital or before 3-month followup',
                    'Withdrew in hospital or before 3-month followup',
                    'Survived hospital, but no biomarker measured',
                    'Died between 3- and 12-month followup',
                    'Withdrew between 3- and 12-month followup',
                    'Eligible for followup, but no cognitive data',
                    'Partial cognitive data',
                    'Complete cognitive data')) })

all.oneobs$twelve.status.func <- with(all.oneobs, {
  factor(ifelse(hosp.status == 'Withdrew and requested data be destroyed', 1,
         ifelse(hosp.status == 'Died in hospital' |
                  three.status.func == 'Died before 3-month followup', 2,
         ifelse(hosp.status == 'Withdrew in hospital' |
                  three.status.func == 'Withdrew before 3-month followup', 3,
         ifelse(hosp.status == 'Survived hospital, but no biomarker measured', 4,
         ifelse(func.cohort.12 & id %in% subset(all.fu, fu.period == '12 Month' & complete.func)$id,
                9,
         ifelse(func.cohort.12 &
                  id %in% subset(all.fu, fu.period == '12 Month' & !complete.func)$id,
                8,
         ifelse(id %in% subset(all.fu, fu.period == '12 Month' & status == 'Deceased')$id, 5,
         ifelse(id %in% subset(all.fu,
                               fu.period == '12 Month' &
                                 status == 'Living-Withdrew from the study')$id,
                6,
         ifelse(hosp.status == 'Survived with >=1 biomarker measured' & !func.cohort.12, 7,
                NA))))))))),
         levels = 1:9,
         labels = c('Withdrew and requested data be destroyed',
                    'Died in hospital or before 3-month followup',
                    'Withdrew in hospital or before 3-month followup',
                    'Survived hospital, but no biomarker measured',
                    'Died between 3- and 12-month followup',
                    'Withdrew between 3- and 12-month followup',
                    'Eligible for followup, but no functional data',
                    'Partial functional data',
                    'Complete functional data')) })

@

<<desctables>>=
desc.data <- all.oneobs %>% left_join(model.fu.data, by = 'id')

desc.vars <- c('age.enroll', 'sex.pp', 'race.pp', 'edu', 'charlson.score', 'iqcode.score.e',
               'stroke.risk', 'adl.e', 'faq.e', 'frailty', 'icu.type', 'num.apache', 'sofa',
               'mean.benz.icu', 'mean.op.new.icu', 'mean.prop.icu', 'mean.dex.icu',
               'mean.hal.icu', 'ever.vent.s', 'vent.los.tot.eo', 'ever.del.s.imp',
               'del.s.imp.eo', 'ever.coma.s.imp', 'coma.s.imp.eo',
               'rbans.global.score.3', 'rbans.global.score.12', 'trail.b.tscore.3',
               'trail.b.tscore.12', 'adl.totscore.3', 'adl.totscore.12', 'faq.totscore.3',
               'faq.totscore.12')

desc.data.all <-
  desc.data[desc.data$id %in%
              subset(all.oneobs,
                     had.biomarker &
                       !(studywd.amt %in% c('2. W/D from Participation and All Data Collected',
                                            '4. N/A Study Staff Withdrew Patient')))$id,
            c('admit.dx', desc.vars)]
desc.data.all$cohort <- 1
desc.data.cog <- desc.data[desc.data$cog.cohort.either, c('admit.dx', desc.vars)]
desc.data.cog$cohort <- 2
desc.data.func <- desc.data[desc.data$func.cohort.either, c('admit.dx', desc.vars)]
desc.data.func$cohort <- 3

desc.data.all <- rbind(desc.data.all, desc.data.cog, desc.data.func)
desc.data.all$cohort <- factor(desc.data.all$cohort,
                               levels = 1:3,
                               labels = c('All Patients with Biomarkers',
                                          'In Cognitive Outcomes Cohort',
                                          'In Functional Outcomes Cohort'))

label(desc.data.all$sex.pp) = 'Sex'
label(desc.data.all$race.pp) = 'Race'
label(desc.data.all$frailty) = 'CSHA Frailty at enrollment'
label(desc.data.all$sofa) = 'SOFA at ICU admission'
label(desc.data.all$num.apache) = 'APACHE II at ICU admission'
label(desc.data.all$icu.type) = 'ICU type'
label(desc.data.all$admit.dx) = 'Primary admission diagnosis'
label(desc.data.all$mean.benz.icu) = 'Mean 24h benzos in ICU (MDZ equivalents)'
label(desc.data.all$mean.op.new.icu) = 'Mean 24h opioids in ICU (fentanyl equivalents)'
label(desc.data.all$mean.prop.icu) = 'Mean 24h propofol in ICU'
label(desc.data.all$mean.dex.icu) = 'Mean 24h dex in ICU'
label(desc.data.all$mean.hal.icu) = 'Mean 24h haldol in ICU'
label(desc.data.all$ever.vent.s) = 'On vent during study period'
label(desc.data.all$ever.del.s.imp) = 'Delirious during study period'
label(desc.data.all$ever.coma.s.imp) = 'Comatose during study period'
label(desc.data.all$rbans.global.score.3) = 'RBANS global score, 3m'
label(desc.data.all$rbans.global.score.12) = 'RBANS global score, 12m'
label(desc.data.all$trail.b.tscore.3) = 'Trails B T-score, 3m'
label(desc.data.all$trail.b.tscore.12) = 'Trails B T-score, 12m'
label(desc.data.all$adl.totscore.3) = 'Katz ADL score, 3m'
label(desc.data.all$adl.totscore.12) = 'Katz ADL score, 12m'
label(desc.data.all$faq.totscore.3) = 'FAQ score, 3m'
label(desc.data.all$faq.totscore.12) = 'FAQ score, 12m'

@
\end{landscape}

<<printdescstats, results='asis'>>=
latex(summaryM(formula(paste(paste(desc.vars, collapse = ' + '), '~ cohort')),
               data = desc.data.all),
      file = '',
      digits = 2,
      prn = FALSE,
      what = '%',
      npct = 'both',
      exclude1 = FALSE,
      landscape = TRUE,
      size = 'footnotesize',
      prmsd = TRUE)

latex(summaryM(admit.dx ~ cohort, data = desc.data.all),
      file = '',
      digits = 2,
      prn = FALSE,
      what = '%',
      npct = 'both',
      exclude1 = FALSE,
      landscape = TRUE,
      size = 'small',
      prmsd = TRUE)

@

\begin{landscape}
\section{Model Weighting}
Each model is performed on all survivors in the followup cohort of interest. In order to address
selection bias from survival and attrition - i.e., the fact that patients who are alive and have
long-term followup data are likely different than patients who do not - we also added inverse
probability weights to each model in a second version. These weights are calculated by modeling the
probability that each patient in the original in-hospital cohort contributes to each followup
cohort, then taking the inverse of this estimated weight. In our weighting mdoels, we included age;
Charlson score; education; IQCODE; Framingham stroke risk score; mean 24-hour doses of
benzodiazepines, opioids, propofol, dexmedetomidine, and haloperidol (cube root transformed);
duration of severe sepsis, delirium, and coma; and mean modified SOFA.

Figure \ref{fig:weighthist} shows the distribution of these inverse probability weights and the
number of patients included in the final cohorts.

<<weighthist, results='asis', fig.cap='Histogram of Model Weights by Analysis Cohort', fig.align='center', fig.pos='!h', fig.width=10, fig.height=3>>=
## -- Create histograms for inverse probability weights, showing total N in each cohort ------------
## Data frame including variable names and axis labels to use in histograms
cohort.df <-
  data.frame(cohort.var = c('cog.cohort.3', 'cog.cohort.12', 'func.cohort.3', 'func.cohort.12'),
             wt.var = c('wt.cog.3', 'wt.cog.12', 'wt.func.3', 'wt.func.12'),
             xaxis.title = c('Cognitive Cohort, 3m', 'Cognitive Cohort, 12m',
                             'Functional Cohort, 3m', 'Functional Cohort, 12m'))

## Function to create histogram for a given cohort, weight variable and X axis label
create.wthist <- function(rownum){
  ## Get data needed, replace variable names with generics
  usedata <- model.data[,c(as.character(cohort.df$cohort.var[rownum]),
                           as.character(cohort.df$wt.var[rownum]))]
  names(usedata) <- c('cohort.var', 'wt.var')

  ## Create histogram
  ggplot(aes(x = wt.var), data = subset(usedata, cohort.var)) +
    geom_histogram(colour = NA, fill = 'navy', alpha = 0.8) +
    ## Add N to X axis label
    scale_x_continuous(limits = c(0, 12),
                       name = paste0(cohort.df$xaxis.title[rownum], '\nN = ',
                                     sum(usedata$cohort.var, na.rm = TRUE))) +
    scale_y_continuous(limits = c(0, 225), name = '') +
    theme_minimal() +
    theme(axis.text = element_text(colour = 'grey30', size = 7),
          axis.ticks = element_blank(),
          axis.title = element_text(size = 8))
}

## Create plot for each cohort, then plot in 2x2 matrix
wthist.list <- lapply(1:nrow(cohort.df), FUN = create.wthist)
multiplot(plotlist = wthist.list, layout = matrix(1:4, ncol = 4, byrow = TRUE))
@

<<biomodels>>=

## -- Create multiple imputation objects -----------------------------------------------------------
## Create data sets with only patients in each cohort
## Done differently for cognitive and functional outcomes, because mice uses entire data set whereas
##  aregImpute does not
model.data.cog.3 <- subset(model.data, cog.cohort.3)
model.data.cog.12 <- subset(model.data, cog.cohort.12)

## Create vector of variables to include in all imputations (covariates, outcome scores)
always.use <- c('age.enroll', 'charlson.score', 'edu', 'iqcode.score.e', 'stroke.risk',
                'mean.benz.cube', 'mean.op.cube', 'mean.prop.cube', 'mean.dex.cube',
                'mean.hal.cube', 'adl.e', 'faq.e', 'frailty', 'icudays.sevseptic.s',
                'mean.modsofa.icu', 'del.s.imp', 'coma.s.imp', 'vent.los.tot.s',
                'adl.totscore.12', 'adl.totscore.3', 'faq.rdscore.12', 'faq.rdscore.3',
                'rbans.global.score.12', 'rbans.global.score.3', 'trail.b.tscore.12',
                'trail.b.tscore.3')

## Create data sets with only patients included in each time point cohort
model.data.func.3 <- model.data[model.data$func.cohort.3,
                                c(always.use,
                                  gsub('\\.imp', '\\.mean.t', biomarker.vnames),
                                  gsub('\\.imp', '\\.first.t', biomarker.vnames),
                                  gsub('\\.imp', '\\.pctchg', biomarker.vnames),
                                  'wt.func.3')]

model.data.func.12 <- model.data[model.data$func.cohort.12,
                                 c(always.use,
                                   gsub('\\.imp', '\\.mean.t', biomarker.vnames),
                                   gsub('\\.imp', '\\.first.t', biomarker.vnames),
                                   gsub('\\.imp', '\\.pctchg', biomarker.vnames),
                                   'wt.func.12')]

## -- If requested, recreate imputation objects; otherwise, load previously saved objects ----------
if(rerun.imputed){
  ## Use aregImpute for cognitive outcomes
  create.areg.obj <- function(cohort.data, marker.measure){
    areg.formula <-
      as.formula(paste0('~ ',
                        paste(c('age.enroll', 'charlson.score', 'I(iqcode.score.e)', 'stroke.risk',
                                'mean.benz.cube', 'mean.op.cube', 'mean.prop.cube',
                                'I(mean.dex.cube)', 'I(mean.hal.cube)', 'icudays.sevseptic.s',
                                'del.s.imp', 'as.numeric(frailty)', 'I(adl.e)', 'I(faq.e)',
                                gsub('\\.imp$', paste0('.', marker.measure), biomarker.vnames)),
                              collapse = ' + ')))
    
    set.seed(56)
    do.call('aregImpute',
            list(formula = areg.formula,
                 n.impute = 10,
                 nk = 3,
                 data = cohort.data))
  }
  
  areg.cog.mean.3 <- create.areg.obj(model.data.cog.3, marker.measure = 'mean')
  areg.cog.mean.12 <- create.areg.obj(model.data.cog.12, marker.measure = 'mean')
  areg.cog.first.3 <- create.areg.obj(model.data.cog.3, marker.measure = 'first')
  areg.cog.first.12 <- create.areg.obj(model.data.cog.12, marker.measure = 'first')
  areg.cog.pctchg.3 <- create.areg.obj(model.data.cog.3, marker.measure = 'pctchg')
  areg.cog.pctchg.12 <- create.areg.obj(model.data.cog.12, marker.measure = 'pctchg')
  
  ## Use mice for functional outcomes ##
  ## Create prediction matrix to use in mice() (same applies to both time points) ##
  ## Create vector that is all 1s; function will replace diagonal and unused biomarker measures
  ##  with 0s
  tmp <- c(rep(1, ncol(model.data.func.3) - 1), 0)
  names(tmp) <- colnames(model.data.func.3)
  create.mice.predmat <- function(marker.measure = c('mean', 'first', 'pctchg')){
    tmpmat <- do.call(rbind,
                      lapply(names(model.data.func.3), FUN = function(x){
                        tmp2 <- tmp
                        
                        ## Which marker measures are *not* being used?
                        not.used <- setdiff(c('mean', 'first', 'pctchg'), marker.measure)
                        not.used <- gsub('mean', 'mean\\.t', not.used)
                        not.used <- gsub('first', 'first\\.t', not.used)
                        
                        replace.vars <-
                          unique(c(x,
                                   gsub('\\.imp', paste0('\\.', not.used[1]), biomarker.vnames),
                                   gsub('\\.imp', paste0('\\.', not.used[2]), biomarker.vnames)))
                        
                        tmp2[replace.vars] <- 0
                        return(tmp2)
                      }))
    
    rownames(tmpmat) <- colnames(tmpmat) <- names(model.data.func.3)
    return(tmpmat)
  }
  
  mice.predmat.mean <- create.mice.predmat('mean')
  mice.predmat.first <- create.mice.predmat('first')
  mice.predmat.pctchg <- create.mice.predmat('pctchg')
  
  ## Create mice object for each biomarker measure
  mice.mean.3 <-
    mice(data = model.data.func.3, m = 10, predictorMatrix = mice.predmat.mean, seed = 56)
  mice.mean.12 <-
    mice(data = model.data.func.12, m = 10, predictorMatrix = mice.predmat.mean, seed = 56)
  mice.first.3 <-
    mice(data = model.data.func.3, m = 10, predictorMatrix = mice.predmat.first, seed = 56)
  mice.first.12 <-
    mice(data = model.data.func.12, m = 10, predictorMatrix = mice.predmat.first, seed = 56)
  mice.pctchg.3 <-
    mice(data = model.data.func.3, m = 10, predictorMatrix = mice.predmat.pctchg, seed = 56)
  mice.pctchg.12 <-
    mice(data = model.data.func.12, m = 10, predictorMatrix = mice.predmat.pctchg, seed = 56)

  save(areg.cog.first.3, areg.cog.first.12, areg.cog.mean.3, areg.cog.mean.12, areg.cog.pctchg.3,
       areg.cog.pctchg.12, mice.first.3, mice.first.12, mice.mean.3, mice.mean.12, mice.pctchg.3,
       mice.pctchg.12, mice.predmat.mean, mice.predmat.pctchg,
       file = 'imputation_objects.Rdata')
  
} else{
  load('imputation_objects.Rdata')
}


dd <- datadist(model.data); options(datadist = 'dd')

## Initial setup: start formulas for each type of model
## Cognitive outcomes
## Delirium *not* included
covar.cog <- "rcs(age.enroll, 3) + rcs(charlson.score, 3) + rcs(edu, 3) + rcs(iqcode.score.e, 3) + rcs(stroke.risk, 3) + rcs(mean.benz.cube, 3) + rcs(mean.op.cube, 3) + rcs(mean.prop.cube, 3) + mean.dex.cube + mean.hal.cube + rcs(markervar, 3)"

## Delirium included
covar.del.cog <- "rcs(age.enroll, 3) + rcs(charlson.score, 3) + rcs(edu, 3) + rcs(iqcode.score.e, 3) + rcs(stroke.risk, 3) + rcs(mean.benz.cube, 3) + rcs(mean.op.cube, 3) + rcs(mean.prop.cube, 3) + mean.dex.cube + mean.hal.cube + rcs(del.s.imp, 3) + rcs(markervar, 3)"

## Functional outcomes
## Delirium *not* included
covar.func <- "age.enroll + charlson.score + edu + iqcode.score.e + mean.benz.cube + mean.op.cube + mean.prop.cube + mean.dex.cube + mean.hal.cube + adl.e + faq.e + rcs(markervar, 3)"
covar.func.nobio <- gsub(' + rcs(markervar, 3)', '', covar.func, fixed = TRUE)

## Delirium included
covar.del.func <- "age.enroll + charlson.score + edu + iqcode.score.e + mean.benz.cube + mean.op.cube + mean.prop.cube + mean.dex.cube + mean.hal.cube + adl.e + faq.e + del.s.imp + rcs(markervar, 3)"
covar.del.func.nobio <- gsub(' + rcs(markervar, 3)', '', covar.del.func, fixed = TRUE)

## For functional outcomes, fit models without biomarker terms to use for LR test
## ADL
nobio.adl.nowt.3 <- with(mice.mean.3,
                         glm.nb(formula(paste('adl.totscore.3 ~', covar.func.nobio))))
nobio.adl.wt.3 <- with(mice.mean.3,
                       glm.nb(formula(paste('adl.totscore.3 ~', covar.func.nobio)),
                              weights = wt.func.3))
nobio.adl.nowt.12 <- with(mice.mean.12,
                          glm.nb(formula(paste('adl.totscore.12 ~', covar.func.nobio))))
nobio.adl.wt.12 <- with(mice.mean.12,
                        glm.nb(formula(paste('adl.totscore.12 ~', covar.func.nobio)),
                               weights = wt.func.12))
nobio.del.adl.nowt.3 <- with(mice.mean.3,
                             glm.nb(formula(paste('adl.totscore.3 ~', covar.del.func.nobio))))
nobio.del.adl.wt.3 <- with(mice.mean.3,
                           glm.nb(formula(paste('adl.totscore.3 ~', covar.del.func.nobio)),
                                  weights = wt.func.3))
nobio.del.adl.nowt.12 <- with(mice.mean.12,
                              glm.nb(formula(paste('adl.totscore.12 ~', covar.del.func.nobio))))
nobio.del.adl.wt.12 <- with(mice.mean.12,
                            glm.nb(formula(paste('adl.totscore.12 ~', covar.del.func.nobio)),
                                   weights = wt.func.12))

## FAQ
nobio.faq.nowt.3 <- with(mice.mean.3,
                         glm.nb(formula(paste('faq.rdscore.3 ~', covar.func.nobio))))
nobio.faq.wt.3 <- with(mice.mean.3,
                       glm.nb(formula(paste('faq.rdscore.3 ~', covar.func.nobio)),
                              weights = wt.func.3))
nobio.faq.nowt.12 <- with(mice.mean.12,
                          glm.nb(formula(paste('faq.rdscore.12 ~', covar.func.nobio))))
nobio.faq.wt.12 <- with(mice.mean.12,
                        glm.nb(formula(paste('faq.rdscore.12 ~', covar.func.nobio)),
                               weights = wt.func.12))
nobio.del.faq.nowt.3 <- with(mice.mean.3,
                             glm.nb(formula(paste('faq.rdscore.3 ~', covar.del.func.nobio))))
nobio.del.faq.wt.3 <- with(mice.mean.3,
                           glm.nb(formula(paste('faq.rdscore.3 ~', covar.del.func.nobio)),
                                  weights = wt.func.3))
nobio.del.faq.nowt.12 <- with(mice.mean.12,
                              glm.nb(formula(paste('faq.rdscore.12 ~', covar.del.func.nobio))))
nobio.del.faq.wt.12 <- with(mice.mean.12,
                            glm.nb(formula(paste('faq.rdscore.12 ~', covar.del.func.nobio)),
                                   weights = wt.func.12))

## Function to create model formulas
make.modform <- function(outcome,
                         markervar,
                         covarstring = c('covar.cog', 'covar.del.cog',
                                         'covar.func', 'covar.del.func')){
  paste(outcome, gsub('markervar', markervar, covarstring, fixed = TRUE), sep = ' ~ ')
}

## -- Function to run all models for a given biomarker ---------------------------------------------
## marker: string representing prefix for biomarker variable (eg, "crp")
## cog.covar: string representing righthand side of model spec for cognitive outcomes
## func.covar: string representing righthand side of model spec for functional outcomes
   ## both the above should include "markervar" for gsubbing actual biomarker variable names
run.marker.mods <- function(marker, cog.covar = covar.cog, func.covar = covar.func){
  ## Create character string representing biomarker variable (+ transformation, if needed) to
  ## include in model formulas
  ## Currently, **no transformations** for % change - negative values create problems
  transmarker.mean <- paste0(marker, '.mean.t')
  transmarker.first <- paste0(marker, '.first.t')
  transmarker.pctchg <- paste0(marker, '.pctchg')

  ## RBANS global score ##
  ## Mean vs. RBANS
  mean.rbans3.form <-
    as.formula(make.modform('rbans.global.score.3', transmarker.mean, cog.covar))
  mean.rbans.nowt.3 <-
    fit.mult.impute(mean.rbans3.form,
                    fitter = ols, xtrans = areg.cog.mean.3, data = model.data.cog.3)
  mean.rbans.wt.3 <-
    fit.mult.impute(mean.rbans3.form,
                    fitter = ols.fix, xtrans = areg.cog.mean.3, weights = wt.cog.3,
                    data = model.data.cog.3)

  mean.rbans12.form <-
    as.formula(make.modform('rbans.global.score.12', transmarker.mean, cog.covar))
  mean.rbans.nowt.12 <-
    fit.mult.impute(mean.rbans12.form,
                    fitter = ols, xtrans = areg.cog.mean.12, data = model.data.cog.12)
  mean.rbans.wt.12 <-
    fit.mult.impute(mean.rbans12.form,
                    fitter = ols.fix, xtrans = areg.cog.mean.12, weights = wt.cog.12,
                    data = model.data.cog.12)

  ## First vs. RBANS
  first.rbans3.form <-
    as.formula(make.modform('rbans.global.score.3', transmarker.first, cog.covar))
  first.rbans.nowt.3 <-
    fit.mult.impute(first.rbans3.form,
                    fitter = ols, xtrans = areg.cog.first.3, data = model.data.cog.3)
  first.rbans.wt.3 <-
    fit.mult.impute(first.rbans3.form,
                    fitter = ols.fix, xtrans = areg.cog.first.3, weights = wt.cog.3,
                    data = model.data.cog.3)

  first.rbans12.form <-
    as.formula(make.modform('rbans.global.score.12', transmarker.first, cog.covar))
  first.rbans.nowt.12 <-
    fit.mult.impute(first.rbans12.form,
                    fitter = ols, xtrans = areg.cog.first.12, data = model.data.cog.12)
  first.rbans.wt.12 <-
    fit.mult.impute(first.rbans12.form,
                    fitter = ols.fix, xtrans = areg.cog.first.12,
                    weights = wt.cog.12, data = model.data.cog.12)

  ## % change vs. RBANS
  pctchg.rbans3.form <-
    as.formula(make.modform('rbans.global.score.3', transmarker.pctchg, cog.covar))
  pctchg.rbans.nowt.3 <-
    fit.mult.impute(pctchg.rbans3.form, fitter = ols, xtrans = areg.cog.pctchg.3,
                    data = model.data.cog.3)
  pctchg.rbans.wt.3 <-
    fit.mult.impute(pctchg.rbans3.form, fitter = ols.fix, xtrans = areg.cog.pctchg.3,
                    weights = wt.cog.3, data = model.data.cog.3)

  pctchg.rbans12.form <-
    as.formula(make.modform('rbans.global.score.12', transmarker.pctchg, cog.covar))
  pctchg.rbans.nowt.12 <-
    fit.mult.impute(pctchg.rbans12.form, fitter = ols, xtrans = areg.cog.pctchg.12,
                    data = model.data.cog.12)
  pctchg.rbans.wt.12 <-
    fit.mult.impute(pctchg.rbans12.form, fitter = ols.fix, xtrans = areg.cog.pctchg.12,
                    weights = wt.cog.12, data = model.data.cog.12)

  ## Trails B T-score ##
  ## Mean vs. Trails B
  mean.trailb3.form <-
    as.formula(make.modform('trail.b.tscore.3', transmarker.mean, cog.covar))
  mean.trailb.nowt.3 <-
    fit.mult.impute(mean.trailb3.form, fitter = ols, xtrans = areg.cog.mean.3,
                    data = model.data.cog.3)
  mean.trailb.wt.3 <-
    fit.mult.impute(mean.trailb3.form, fitter = ols.fix, xtrans = areg.cog.mean.3,
                    weights = wt.cog.3,
                    data = model.data.cog.3)

  mean.trailb12.form <-
    as.formula(make.modform('trail.b.tscore.12', transmarker.mean, cog.covar))
  mean.trailb.nowt.12 <-
    fit.mult.impute(mean.trailb12.form, fitter = ols, xtrans = areg.cog.mean.12,
                    data = model.data.cog.12)
  mean.trailb.wt.12 <-
    fit.mult.impute(mean.trailb12.form,
                    fitter = ols.fix, xtrans = areg.cog.mean.12, weights = wt.cog.12,
                    data = model.data.cog.12)

  ## First vs. Trails B
  first.trailb3.form <-
    as.formula(make.modform('trail.b.tscore.3', transmarker.first, cog.covar))
  first.trailb.nowt.3 <-
    fit.mult.impute(first.trailb3.form, fitter = ols, xtrans = areg.cog.first.3,
                    data = model.data.cog.3)
  first.trailb.wt.3 <-
    fit.mult.impute(first.trailb3.form, fitter = ols.fix, xtrans = areg.cog.first.3,
                    weights = wt.cog.3, data = model.data.cog.3)

  first.trailb12.form <-
    as.formula(make.modform('trail.b.tscore.12', transmarker.first, cog.covar))
  first.trailb.nowt.12 <-
    fit.mult.impute(first.trailb12.form, fitter = ols, xtrans = areg.cog.first.12,
                    data = model.data.cog.12)
  first.trailb.wt.12 <-
    fit.mult.impute(first.trailb12.form, fitter = ols.fix, xtrans = areg.cog.first.12,
                    weights = wt.cog.12, data = model.data.cog.12)

  ## % change vs. Trails B
  pctchg.trailb3.form <-
    as.formula(make.modform('trail.b.tscore.3', transmarker.pctchg, cog.covar))
  pctchg.trailb.nowt.3 <-
    fit.mult.impute(pctchg.trailb3.form, fitter = ols, xtrans = areg.cog.pctchg.3,
                    data = model.data.cog.3)
  pctchg.trailb.wt.3 <-
    fit.mult.impute(pctchg.trailb3.form, fitter = ols.fix, xtrans = areg.cog.pctchg.3,
                    weights = wt.cog.3, data = model.data.cog.3)

  pctchg.trailb12.form <-
    as.formula(make.modform('trail.b.tscore.12', transmarker.pctchg, cog.covar))
  pctchg.trailb.nowt.12 <-
    fit.mult.impute(pctchg.trailb12.form, fitter = ols, xtrans = areg.cog.pctchg.12,
                    data = model.data.cog.12)
  pctchg.trailb.wt.12 <-
    fit.mult.impute(pctchg.trailb12.form, fitter = ols.fix, xtrans = areg.cog.pctchg.12,
                    weights = wt.cog.12, data = model.data.cog.12)

  ## ADL score ##
  ## Mean vs. ADL score
  mean.adl3.formula <- make.modform('adl.totscore.3', transmarker.mean, func.covar)
  mean.adl.nowt.3 <-
    eval(parse(text = sprintf("with(mice.mean.3, glm.nb(formula = %s))", mean.adl3.formula)))
  mean.adl.wt.3 <-
    eval(parse(text = sprintf("with(mice.mean.3, glm.nb(formula = %s, weights = wt.func.3))",
                              mean.adl3.formula)))

  mean.adl12.formula <- make.modform('adl.totscore.12', transmarker.mean, func.covar)
  mean.adl.nowt.12 <-
    eval(parse(text = sprintf("with(mice.mean.12, glm.nb(formula = %s))", mean.adl12.formula)))
  mean.adl.wt.12 <-
    eval(parse(text = sprintf("with(mice.mean.12, glm.nb(formula = %s, weights = wt.func.12))",
                              mean.adl12.formula)))

  ## First vs. ADL
  first.adl3.formula <- make.modform('adl.totscore.3', transmarker.first, func.covar)
  first.adl.nowt.3 <-
    eval(parse(text = sprintf("with(mice.first.3, glm.nb(formula = %s))", first.adl3.formula)))
  first.adl.wt.3 <-
    eval(parse(text = sprintf("with(mice.first.3, glm.nb(formula = %s, weights = wt.func.3))",
                              first.adl3.formula)))

  first.adl12.formula <- make.modform('adl.totscore.12', transmarker.first, func.covar)
  first.adl.nowt.12 <-
    eval(parse(text = sprintf("with(mice.first.12, glm.nb(formula = %s))", first.adl12.formula)))
  first.adl.wt.12 <-
    eval(parse(text = sprintf("with(mice.first.12, glm.nb(formula = %s, weights = wt.func.12))",
                              first.adl12.formula)))

  ## % change vs. ADL
  pctchg.adl3.formula <- make.modform('adl.totscore.3', transmarker.pctchg, func.covar)
  pctchg.adl.nowt.3 <-
    eval(parse(text = sprintf("with(mice.pctchg.3, glm.nb(formula = %s))", pctchg.adl3.formula)))
  pctchg.adl.wt.3 <-
    eval(parse(text = sprintf("with(mice.pctchg.3, glm.nb(formula = %s, weights = wt.func.3))",
                              pctchg.adl3.formula)))

  pctchg.adl12.formula <- make.modform('adl.totscore.12', transmarker.pctchg, func.covar)
  pctchg.adl.nowt.12 <-
    eval(parse(text = sprintf("with(mice.pctchg.12, glm.nb(formula = %s))", pctchg.adl12.formula)))
  pctchg.adl.wt.12 <-
    eval(parse(text = sprintf("with(mice.pctchg.12, glm.nb(formula = %s, weights = wt.func.12))",
                              pctchg.adl12.formula)))

  ## FAQ score ##
  ## Mean vs. FAQ score
  mean.faq3.formula <- make.modform('faq.rdscore.3', transmarker.mean, func.covar)
  mean.faq.nowt.3 <-
    eval(parse(text = sprintf("with(mice.mean.3, glm.nb(formula = %s))", mean.faq3.formula)))
  mean.faq.wt.3 <-
    eval(parse(text = sprintf("with(mice.mean.3, glm.nb(formula = %s, weights = wt.func.3))",
                              mean.faq3.formula)))

  mean.faq12.formula <- make.modform('faq.rdscore.12', transmarker.mean, func.covar)
  mean.faq.nowt.12 <-
    eval(parse(text = sprintf("with(mice.mean.12, glm.nb(formula = %s))", mean.faq12.formula)))
  mean.faq.wt.12 <-
    eval(parse(text = sprintf("with(mice.mean.12, glm.nb(formula = %s, weights = wt.func.12))",
                              mean.faq12.formula)))

  ## First vs. FAQ
  first.faq3.formula <- make.modform('faq.rdscore.3', transmarker.first, func.covar)
  first.faq.nowt.3 <-
    eval(parse(text = sprintf("with(mice.first.3, glm.nb(formula = %s))", first.faq3.formula)))
  first.faq.wt.3 <-
    eval(parse(text = sprintf("with(mice.first.3, glm.nb(formula = %s, weights = wt.func.3))",
                              first.faq3.formula)))

  first.faq12.formula <- make.modform('faq.rdscore.12', transmarker.first, func.covar)
  first.faq.nowt.12 <-
    eval(parse(text = sprintf("with(mice.first.12, glm.nb(formula = %s))", first.faq12.formula)))
  first.faq.wt.12 <-
    eval(parse(text = sprintf("with(mice.first.12, glm.nb(formula = %s, weights = wt.func.12))",
                              first.faq12.formula)))

  ## % change vs. FAQ
  pctchg.faq3.formula <- make.modform('faq.rdscore.3', transmarker.pctchg, func.covar)
  pctchg.faq.nowt.3 <-
    eval(parse(text = sprintf("with(mice.pctchg.3, glm.nb(formula = %s))", pctchg.faq3.formula)))
  pctchg.faq.wt.3 <-
    eval(parse(text = sprintf("with(mice.pctchg.3, glm.nb(formula = %s, weights = wt.func.3))",
                              pctchg.faq3.formula)))

  pctchg.faq12.formula <- make.modform('faq.rdscore.12', transmarker.pctchg, func.covar)
  pctchg.faq.nowt.12 <-
    eval(parse(text = sprintf("with(mice.pctchg.12, glm.nb(formula = %s))", pctchg.faq12.formula)))
  pctchg.faq.wt.12 <-
    eval(parse(text = sprintf("with(mice.pctchg.12, glm.nb(formula = %s, weights = wt.func.12))",
                              pctchg.faq12.formula)))

  return(list('mean.rbans.nowt.3' = mean.rbans.nowt.3,
              'mean.rbans.wt.3' = mean.rbans.wt.3,
              'mean.rbans.nowt.12' = mean.rbans.nowt.12,
              'mean.rbans.wt.12' = mean.rbans.wt.12,
              'first.rbans.nowt.3' = first.rbans.nowt.3,
              'first.rbans.wt.3' = first.rbans.wt.3,
              'first.rbans.nowt.12' = first.rbans.nowt.12,
              'first.rbans.wt.12' = first.rbans.wt.12,
              'pctchg.rbans.nowt.3' = pctchg.rbans.nowt.3,
              'pctchg.rbans.wt.3' = pctchg.rbans.wt.3,
              'pctchg.rbans.nowt.12' = pctchg.rbans.nowt.12,
              'pctchg.rbans.wt.12' = pctchg.rbans.wt.12,
              'mean.trailb.nowt.3' = mean.trailb.nowt.3,
              'mean.trailb.wt.3' = mean.trailb.wt.3,
              'mean.trailb.nowt.12' = mean.trailb.nowt.12,
              'mean.trailb.wt.12' = mean.trailb.wt.12,
              'first.trailb.nowt.3' = first.trailb.nowt.3,
              'first.trailb.wt.3' = first.trailb.wt.3,
              'first.trailb.nowt.12' = first.trailb.nowt.12,
              'first.trailb.wt.12' = first.trailb.wt.12,
              'pctchg.trailb.nowt.3' = pctchg.trailb.nowt.3,
              'pctchg.trailb.wt.3' = pctchg.trailb.wt.3,
              'pctchg.trailb.nowt.12' = pctchg.trailb.nowt.12,
              'pctchg.trailb.wt.12' = pctchg.trailb.wt.12,
              'mean.adl.nowt.3' = mean.adl.nowt.3,
              'mean.adl.wt.3' = mean.adl.wt.3,
              'mean.adl.nowt.12' = mean.adl.nowt.12,
              'mean.adl.wt.12' = mean.adl.wt.12,
              'first.adl.nowt.3' = first.adl.nowt.3,
              'first.adl.wt.3' = first.adl.wt.3,
              'first.adl.nowt.12' = first.adl.nowt.12,
              'first.adl.wt.12' = first.adl.wt.12,
              'pctchg.adl.nowt.3' = pctchg.adl.nowt.3,
              'pctchg.adl.wt.3' = pctchg.adl.wt.3,
              'pctchg.adl.nowt.12' = pctchg.adl.nowt.12,
              'pctchg.adl.wt.12' = pctchg.adl.wt.12,
              'mean.faq.nowt.3' = mean.faq.nowt.3,
              'mean.faq.wt.3' = mean.faq.wt.3,
              'mean.faq.nowt.12' = mean.faq.nowt.12,
              'mean.faq.wt.12' = mean.faq.wt.12,
              'first.faq.nowt.3' = first.faq.nowt.3,
              'first.faq.wt.3' = first.faq.wt.3,
              'first.faq.nowt.12' = first.faq.nowt.12,
              'first.faq.wt.12' = first.faq.wt.12,
              'pctchg.faq.nowt.3' = pctchg.faq.nowt.3,
              'pctchg.faq.wt.3' = pctchg.faq.wt.3,
              'pctchg.faq.nowt.12' = pctchg.faq.nowt.12,
              'pctchg.faq.wt.12' = pctchg.faq.wt.12))
}

## -- If requested, rerun models; otherwise, load saved objects ------------------------------------
if(rerun.models){
  ## Models without delirium
  crp.mods <- run.marker.mods('crp')
  ifngamma.mods <- run.marker.mods('ifngamma')
  il10.mods <- run.marker.mods('il10')
  il12.mods <- run.marker.mods('il12')
  il1b.mods <- run.marker.mods('il1b')
  il6.mods <- run.marker.mods('il6')
  il8.mods <- run.marker.mods('il8')
  mmp9.mods <- run.marker.mods('mmp9')
  proteinc.mods <- run.marker.mods('proteinc')
  tnfa.mods <- run.marker.mods('tnfa')
  tnfr1.mods <- run.marker.mods('tnfr1')
  
  
  ## Models with delirium
  crp.del.mods <- run.marker.mods('crp',
                                  cog.covar = covar.del.cog,
                                  func.covar = covar.del.func)
  ifngamma.del.mods <- run.marker.mods('ifngamma',
                                       cog.covar = covar.del.cog,
                                       func.covar = covar.del.func)
  il10.del.mods <- run.marker.mods('il10',
                                   cog.covar = covar.del.cog,
                                   func.covar = covar.del.func)
  il12.del.mods <- run.marker.mods('il12',
                                   cog.covar = covar.del.cog,
                                   func.covar = covar.del.func)
  il1b.del.mods <- run.marker.mods('il1b',
                                   cog.covar = covar.del.cog,
                                   func.covar = covar.del.func)
  il6.del.mods <- run.marker.mods('il6',
                                  cog.covar = covar.del.cog,
                                  func.covar = covar.del.func)
  il8.del.mods <- run.marker.mods('il8',
                                  cog.covar = covar.del.cog,
                                  func.covar = covar.del.func)
  mmp9.del.mods <- run.marker.mods('mmp9',
                                   cog.covar = covar.del.cog,
                                   func.covar = covar.del.func)
  proteinc.del.mods <- run.marker.mods('proteinc',
                                       cog.covar = covar.del.cog,
                                       func.covar = covar.del.func)
  tnfa.del.mods <- run.marker.mods('tnfa',
                                   cog.covar = covar.del.cog,
                                   func.covar = covar.del.func)
  tnfr1.del.mods <- run.marker.mods('tnfr1',
                                    cog.covar = covar.del.cog,
                                    func.covar = covar.del.func)
  
  save(crp.mods, crp.del.mods,
       ifngamma.mods, ifngamma.del.mods,
       il10.mods, il10.del.mods,
       il12.mods, il12.del.mods,
       il1b.mods, il1b.del.mods,
       il6.mods, il6.del.mods,
       il8.mods, il8.del.mods,
       mmp9.mods, mmp9.del.mods,
       proteinc.mods, proteinc.del.mods,
       tnfa.mods, tnfa.del.mods,
       tnfr1.mods, tnfr1.del.mods,
       file = 'run_marker_mods_objects.Rdata')
} else{
  load('run_marker_mods_objects.Rdata')
}

# ## -- Function to check linear model diagnostics ---------------------------------------------------
# check.diag.linear <- function(mod.list, time = c(3, 12), out.name, out.str, title.str = NULL){
#   ## If no title.str given, set to same as out.str
#   if(is.null(title.str)){ title.str <- out.str }
#
#   par(mfrow = c(3, 4), cex = 0.5, cex.main = 0.8)
#   ols.diagnostics(model.obj = mod.list[[match(paste0('mean.', out.name, '.nowt.', time),
#                                               names(mod.list))]],
#                   outcome.string = out.str,
#                   title.string = paste0(time, 'M ', out.str, ' vs Mean, No Weights'))
#   ols.diagnostics(model.obj = mod.list[[match(paste0('mean.', out.name, '.wt.', time),
#                                               names(mod.list))]],
#                   outcome.string = out.str,
#                   title.string = paste0(time, 'M ', out.str, ' vs Mean, With Weights'))
#   ols.diagnostics(model.obj = mod.list[[match(paste0('first.', out.name, '.nowt.', time),
#                                               names(mod.list))]],
#                   outcome.string = out.str,
#                   title.string = paste0(time, 'M ', out.str, ' vs First, No Weights'))
#   ols.diagnostics(model.obj = mod.list[[match(paste0('first.', out.name, '.wt.', time),
#                                               names(mod.list))]],
#                   outcome.string = out.str,
#                   title.string = paste0(time, 'M ', out.str, ' vs First, With Weights'))
#   ols.diagnostics(model.obj = mod.list[[match(paste0('pctchg.', out.name, '.nowt.', time),
#                                               names(mod.list))]],
#                   outcome.string = out.str,
#                   title.string = paste0(time, 'M ', out.str, ' vs % Change, No Weights'))
#   ols.diagnostics(model.obj = mod.list[[match(paste0('pctchg.', out.name, '.wt.', time),
#                                               names(mod.list))]],
#                   outcome.string = out.str,
#                   title.string = paste0(time, 'M ', out.str, ' vs % Change, With Weights'))
# }

## -- Check diagnostics -----------------------------------------------------------------------------
## Without delirium
# ## CRP
# check.diag.linear(crp.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(crp.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(crp.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(crp.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IFN-gamma
# check.diag.linear(ifngamma.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(ifngamma.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(ifngamma.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(ifngamma.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-10
# check.diag.linear(il10.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il10.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il10.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il10.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-12
# check.diag.linear(il12.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il12.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il12.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il12.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-1b
# check.diag.linear(il1b.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il1b.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il1b.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il1b.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-6
# check.diag.linear(il6.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il6.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il6.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il6.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-8
# check.diag.linear(il8.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il8.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il8.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il8.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## MMP9
# check.diag.linear(mmp9.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(mmp9.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(mmp9.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(mmp9.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## Protein C
# check.diag.linear(proteinc.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(proteinc.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(proteinc.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(proteinc.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## TNF-alpha
# check.diag.linear(tnfa.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(tnfa.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(tnfa.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(tnfa.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## TNFR1
# check.diag.linear(tnfr1.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(tnfr1.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(tnfr1.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(tnfr1.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')

# ## CRP
# check.diag.linear(crp.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(crp.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(crp.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(crp.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IFN-gamma
# check.diag.linear(ifngamma.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(ifngamma.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(ifngamma.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(ifngamma.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-10
# check.diag.linear(il10.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il10.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il10.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il10.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-12
# check.diag.linear(il12.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il12.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il12.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il12.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-1b
# check.diag.linear(il1b.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il1b.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il1b.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il1b.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-6
# check.diag.linear(il6.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il6.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il6.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il6.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-8
# check.diag.linear(il8.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il8.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il8.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il8.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## MMP9
# check.diag.linear(mmp9.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(mmp9.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(mmp9.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(mmp9.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## Protein C
# check.diag.linear(proteinc.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(proteinc.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(proteinc.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(proteinc.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## TNF-alpha
# check.diag.linear(tnfa.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(tnfa.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(tnfa.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(tnfa.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## TNFR1
# check.diag.linear(tnfr1.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(tnfr1.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(tnfr1.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(tnfr1.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')

## With delirium
# ## CRP
# check.diag.linear(crp.del.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(crp.del.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(crp.del.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(crp.del.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IFN-gamma
# check.diag.linear(ifngamma.del.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(ifngamma.del.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(ifngamma.del.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(ifngamma.del.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-10
# check.diag.linear(il10.del.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il10.del.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il10.del.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il10.del.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-12
# check.diag.linear(il12.del.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il12.del.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il12.del.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il12.del.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-1b
# check.diag.linear(il1b.del.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il1b.del.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il1b.del.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il1b.del.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-6
# check.diag.linear(il6.del.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il6.del.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il6.del.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il6.del.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-8
# check.diag.linear(il8.del.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il8.del.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il8.del.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il8.del.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## MMP9
# check.diag.linear(mmp9.del.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(mmp9.del.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(mmp9.del.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(mmp9.del.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## Protein C
# check.diag.linear(proteinc.del.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(proteinc.del.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(proteinc.del.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(proteinc.del.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## TNF-alpha
# check.diag.linear(tnfa.del.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(tnfa.del.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(tnfa.del.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(tnfa.del.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## TNFR1
# check.diag.linear(tnfr1.del.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(tnfr1.del.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(tnfr1.del.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(tnfr1.del.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')

# ## -- Check assumptions for POLR models (ADL, FAQ) - unweighted versions only ----------------------
# ## Function to check assumptions for all unweighted models for a given biomarker and test
# po.assume.markertest <- function(mod.list, marker, cut.seq, test){
#   po.assume(model.obj = mod.list[[paste0('mean.', test, '.nowt.3')]],
#             cuts = cut.seq, plot.vars = marker, model.data = model.data.func.3)
#   po.assume(model.obj = mod.list[[paste0('mean.', test, '.nowt.12')]],
#             cuts = cut.seq, plot.vars = marker, model.data = model.data.func.12)
# }
#
# ## Set cuts for both tests
# adl.cutseq <- seq(1, 7, 1)
# faq.cutseq <- seq(1, 15, 2)
#
# # par(mfrow = c(2, 1))
#
# ## All assumptions for ADL in one PDF
# pdf('biomarker_adl_assume.pdf', width = 10.5, height = 8)
# par(mfrow = c(6, 8), mar = c(2, 4, 2, 2))
# po.assume.markertest(mod.list = crp.mods, marker = 'crp', cut.seq = adl.cutseq, test = 'adl')
# po.assume.markertest(mod.list = ifngamma.mods, marker = 'ifngamma',
#                      cut.seq = adl.cutseq, test = 'adl')
# po.assume.markertest(mod.list = il10.mods, marker = 'il10', cut.seq = adl.cutseq, test = 'adl')
# po.assume.markertest(mod.list = il12.mods, marker = 'il12', cut.seq = adl.cutseq, test = 'adl')
# po.assume.markertest(mod.list = il1b.mods, marker = 'il1b', cut.seq = adl.cutseq, test = 'adl')
# po.assume.markertest(mod.list = il6.mods, marker = 'il6', cut.seq = adl.cutseq, test = 'adl')
# po.assume.markertest(mod.list = il8.mods, marker = 'il8', cut.seq = adl.cutseq, test = 'adl')
# po.assume.markertest(mod.list = mmp9.mods, marker = 'mmp9', cut.seq = adl.cutseq, test = 'adl')
# po.assume.markertest(mod.list = proteinc.mods, marker = 'proteinc',
#                      cut.seq = adl.cutseq, test = 'adl')
# po.assume.markertest(mod.list = tnfa.mods, marker = 'tnfa', cut.seq = adl.cutseq, test = 'adl')
# po.assume.markertest(mod.list = tnfr1.mods, marker = 'tnfr1', cut.seq = adl.cutseq, test = 'adl')
# dev.off()
#
# ## All assumptions for FAQ in one PDF
# pdf('biomarker_faq_assume.pdf', width = 10.5, height = 8)
# par(mfrow = c(6, 8), mar = c(2, 4, 2, 2))
# po.assume.markertest(mod.list = crp.mods, marker = 'crp', cut.seq = adl.cutseq, test = 'faq')
# po.assume.markertest(mod.list = ifngamma.mods, marker = 'ifngamma',
#                      cut.seq = adl.cutseq, test = 'faq')
# po.assume.markertest(mod.list = il10.mods, marker = 'il10', cut.seq = adl.cutseq, test = 'faq')
# po.assume.markertest(mod.list = il12.mods, marker = 'il12', cut.seq = adl.cutseq, test = 'faq')
# po.assume.markertest(mod.list = il1b.mods, marker = 'il1b', cut.seq = adl.cutseq, test = 'faq')
# po.assume.markertest(mod.list = il6.mods, marker = 'il6', cut.seq = adl.cutseq, test = 'faq')
# po.assume.markertest(mod.list = il8.mods, marker = 'il8', cut.seq = adl.cutseq, test = 'faq')
# po.assume.markertest(mod.list = mmp9.mods, marker = 'mmp9', cut.seq = adl.cutseq, test = 'faq')
# po.assume.markertest(mod.list = proteinc.mods, marker = 'proteinc',
#                      cut.seq = adl.cutseq, test = 'faq')
# po.assume.markertest(mod.list = tnfa.mods, marker = 'tnfa', cut.seq = adl.cutseq, test = 'faq')
# po.assume.markertest(mod.list = tnfr1.mods, marker = 'tnfr1', cut.seq = adl.cutseq, test = 'faq')
# dev.off()

## -- Function to get LR p-values for biomarkers from functional outcome models --------------------
func.bio.pvals <- function(mod.list, inc.del = FALSE, use.method = c('Wald', 'likelihood')){
  if(inc.del){
    ref.adl.nowt.3 <- nobio.del.adl.nowt.3
    ref.adl.wt.3 <- nobio.del.adl.wt.3
    ref.adl.nowt.12 <- nobio.del.adl.nowt.12
    ref.adl.wt.12 <- nobio.del.adl.wt.12
    ref.faq.nowt.3 <- nobio.del.faq.nowt.3
    ref.faq.wt.3 <- nobio.del.faq.wt.3
    ref.faq.nowt.12 <- nobio.del.faq.nowt.12
    ref.faq.wt.12 <- nobio.del.faq.wt.12
  } else{
    ref.adl.nowt.3 <- nobio.adl.nowt.3
    ref.adl.wt.3 <- nobio.adl.wt.3
    ref.adl.nowt.12 <- nobio.adl.nowt.12
    ref.adl.wt.12 <- nobio.adl.wt.12
    ref.faq.nowt.3 <- nobio.faq.nowt.3
    ref.faq.wt.3 <- nobio.faq.wt.3
    ref.faq.nowt.12 <- nobio.faq.nowt.12
    ref.faq.wt.12 <- nobio.faq.wt.12
  }

  ## ADL ##
  p.mean.adl.nowt.3 <- pool.compare(mod.list[['mean.adl.nowt.3']], ref.adl.nowt.3,
                                    data = mice.mean.3, method = use.method)$pvalue
  p.mean.adl.wt.3 <- pool.compare(mod.list[['mean.adl.wt.3']], ref.adl.wt.3,
                                  data = mice.mean.3, method = use.method)$pvalue
  p.mean.adl.nowt.12 <- pool.compare(mod.list[['mean.adl.nowt.12']], ref.adl.nowt.12,
                                     data = mice.mean.12, method = use.method)$pvalue
  p.mean.adl.wt.12 <- pool.compare(mod.list[['mean.adl.wt.12']], ref.adl.wt.12,
                                   data = mice.mean.12, method = use.method)$pvalue
  p.first.adl.nowt.3 <- pool.compare(mod.list[['first.adl.nowt.3']], ref.adl.nowt.3,
                                     data = mice.first.3, method = use.method)$pvalue
  p.first.adl.wt.3 <- pool.compare(mod.list[['first.adl.wt.3']], ref.adl.wt.3,
                                   data = mice.first.3, method = use.method)$pvalue
  p.first.adl.nowt.12 <- pool.compare(mod.list[['first.adl.nowt.12']], ref.adl.nowt.12,
                                      data = mice.first.12, method = use.method)$pvalue
  p.first.adl.wt.12 <- pool.compare(mod.list[['first.adl.wt.12']], ref.adl.wt.12,
                                    data = mice.first.12, method = use.method)$pvalue
  p.pctchg.adl.nowt.3 <- pool.compare(mod.list[['pctchg.adl.nowt.3']], ref.adl.nowt.3,
                                      data = mice.pctchg.3, method = use.method)$pvalue
  p.pctchg.adl.wt.3 <- pool.compare(mod.list[['pctchg.adl.wt.3']], ref.adl.wt.3,
                                    data = mice.pctchg.3, method = use.method)$pvalue
  p.pctchg.adl.nowt.12 <- pool.compare(mod.list[['pctchg.adl.nowt.12']], ref.adl.nowt.12,
                                       data = mice.pctchg.12, method = use.method)$pvalue
  p.pctchg.adl.wt.12 <- pool.compare(mod.list[['pctchg.adl.wt.12']], ref.adl.wt.12,
                                     data = mice.pctchg.12, method = use.method)$pvalue

  ## FAQ ##
  p.mean.faq.nowt.3 <- pool.compare(mod.list[['mean.faq.nowt.3']], ref.faq.nowt.3,
                                    data = mice.mean.3, method = use.method)$pvalue
  p.mean.faq.wt.3 <- pool.compare(mod.list[['mean.faq.wt.3']], ref.faq.wt.3,
                                  data = mice.mean.3, method = use.method)$pvalue
  p.mean.faq.nowt.12 <- pool.compare(mod.list[['mean.faq.nowt.12']], ref.faq.nowt.12,
                                     data = mice.mean.12, method = use.method)$pvalue
  p.mean.faq.wt.12 <- pool.compare(mod.list[['mean.faq.wt.12']], ref.faq.wt.12,
                                   data = mice.mean.12, method = use.method)$pvalue
  p.first.faq.nowt.3 <- pool.compare(mod.list[['first.faq.nowt.3']], ref.faq.nowt.3,
                                     data = mice.first.3, method = use.method)$pvalue
  p.first.faq.wt.3 <- pool.compare(mod.list[['first.faq.wt.3']], ref.faq.wt.3,
                                   data = mice.first.3, method = use.method)$pvalue
  p.first.faq.nowt.12 <- pool.compare(mod.list[['first.faq.nowt.12']], ref.faq.nowt.12,
                                      data = mice.first.12, method = use.method)$pvalue
  p.first.faq.wt.12 <- pool.compare(mod.list[['first.faq.wt.12']], ref.faq.wt.12,
                                    data = mice.first.12, method = use.method)$pvalue
  p.pctchg.faq.nowt.3 <- pool.compare(mod.list[['pctchg.faq.nowt.3']], ref.faq.nowt.3,
                                      data = mice.pctchg.3, method = use.method)$pvalue
  p.pctchg.faq.wt.3 <- pool.compare(mod.list[['pctchg.faq.wt.3']], ref.faq.wt.3,
                                    data = mice.pctchg.3, method = use.method)$pvalue
  p.pctchg.faq.nowt.12 <- pool.compare(mod.list[['pctchg.faq.nowt.12']], ref.faq.nowt.12,
                                       data = mice.pctchg.12, method = use.method)$pvalue
  p.pctchg.faq.wt.12 <- pool.compare(mod.list[['pctchg.faq.wt.12']], ref.faq.wt.12,
                                     data = mice.pctchg.12, method = use.method)$pvalue

  return(list('p.mean.adl.nowt.3' = p.mean.adl.nowt.3,
              'p.mean.adl.wt.3' = p.mean.adl.wt.3,
              'p.mean.adl.nowt.12' = p.mean.adl.nowt.12,
              'p.mean.adl.wt.12' = p.mean.adl.wt.12,
              'p.first.adl.nowt.3' = p.first.adl.nowt.3,
              'p.first.adl.wt.3' = p.first.adl.wt.3,
              'p.first.adl.nowt.12' = p.first.adl.nowt.12,
              'p.first.adl.wt.12' = p.first.adl.wt.12,
              'p.pctchg.adl.nowt.3' = p.pctchg.adl.nowt.3,
              'p.pctchg.adl.wt.3' = p.pctchg.adl.wt.3,
              'p.pctchg.adl.nowt.12' = p.pctchg.adl.nowt.12,
              'p.pctchg.adl.wt.12' = p.pctchg.adl.wt.12,
              'p.mean.faq.nowt.3' = p.mean.faq.nowt.3,
              'p.mean.faq.wt.3' = p.mean.faq.wt.3,
              'p.mean.faq.nowt.12' = p.mean.faq.nowt.12,
              'p.mean.faq.wt.12' = p.mean.faq.wt.12,
              'p.first.faq.nowt.3' = p.first.faq.nowt.3,
              'p.first.faq.wt.3' = p.first.faq.wt.3,
              'p.first.faq.nowt.12' = p.first.faq.nowt.12,
              'p.first.faq.wt.12' = p.first.faq.wt.12,
              'p.pctchg.faq.nowt.3' = p.pctchg.faq.nowt.3,
              'p.pctchg.faq.wt.3' = p.pctchg.faq.wt.3,
              'p.pctchg.faq.nowt.12' = p.pctchg.faq.nowt.12,
              'p.pctchg.faq.wt.12' = p.pctchg.faq.wt.12))
}

use.this.method <- 'likelihood'

crp.func.pvals <- func.bio.pvals(mod.list = crp.mods, use.method = use.this.method)
ifngamma.func.pvals <- func.bio.pvals(mod.list = ifngamma.mods, use.method = use.this.method)
il10.func.pvals <- func.bio.pvals(mod.list = il10.mods, use.method = use.this.method)
il12.func.pvals <- func.bio.pvals(mod.list = il12.mods, use.method = use.this.method)
il1b.func.pvals <- func.bio.pvals(mod.list = il1b.mods, use.method = use.this.method)
il6.func.pvals <- func.bio.pvals(mod.list = il6.mods, use.method = use.this.method)
il8.func.pvals <- func.bio.pvals(mod.list = il8.mods, use.method = use.this.method)
mmp9.func.pvals <- func.bio.pvals(mod.list = mmp9.mods, use.method = use.this.method)
proteinc.func.pvals <- func.bio.pvals(mod.list = proteinc.mods, use.method = use.this.method)
tnfa.func.pvals <- func.bio.pvals(mod.list = tnfa.mods, use.method = use.this.method)
tnfr1.func.pvals <- func.bio.pvals(mod.list = tnfr1.mods, use.method = use.this.method)

crp.del.func.pvals <- func.bio.pvals(mod.list = crp.del.mods,
                                     inc.del = TRUE,
                                     use.method = use.this.method)
ifngamma.del.func.pvals <- func.bio.pvals(mod.list = ifngamma.del.mods,
                                          inc.del = TRUE,
                                          use.method = use.this.method)
il10.del.func.pvals <- func.bio.pvals(mod.list = il10.del.mods,
                                      inc.del = TRUE,
                                      use.method = use.this.method)
il12.del.func.pvals <- func.bio.pvals(mod.list = il12.del.mods,
                                      inc.del = TRUE,
                                      use.method = use.this.method)
il1b.del.func.pvals <- func.bio.pvals(mod.list = il1b.del.mods,
                                      inc.del = TRUE,
                                      use.method = use.this.method)
il6.del.func.pvals <- func.bio.pvals(mod.list = il6.del.mods,
                                     inc.del = TRUE,
                                     use.method = use.this.method)
il8.del.func.pvals <- func.bio.pvals(mod.list = il8.del.mods,
                                     inc.del = TRUE,
                                     use.method = use.this.method)
mmp9.del.func.pvals <- func.bio.pvals(mod.list = mmp9.del.mods,
                                      inc.del = TRUE,
                                      use.method = use.this.method)
proteinc.del.func.pvals <- func.bio.pvals(mod.list = proteinc.del.mods,
                                          inc.del = TRUE,
                                          use.method = use.this.method)
tnfa.del.func.pvals <- func.bio.pvals(mod.list = tnfa.del.mods,
                                      inc.del = TRUE,
                                      use.method = use.this.method)
tnfr1.del.func.pvals <- func.bio.pvals(mod.list = tnfr1.del.mods,
                                       inc.del = TRUE,
                                       use.method = use.this.method)

## -- Need to calculate predicted values by hand ---------------------------------------------------
## Create design matrix, adjusting all covariates to median or mode
pred.vars <- intersect(names(crp.mods$mean.adl.nowt.3$analyses[[1]]$coefficients),
                       names(model.data))
pred.del.vars <- intersect(names(crp.del.mods$mean.adl.nowt.3$analyses[[1]]$coefficients),
                           names(model.data))
## All our current covariates are numeric and linear, which is helpful
pred.vec <- unlist(lapply(pred.vars, FUN = function(predvar){
  median(model.data[,predvar], na.rm = TRUE) }))
pred.del.vec <- unlist(lapply(pred.del.vars, FUN = function(predvar){
  median(model.data[,predvar], na.rm = TRUE) }))

## Function to, for each row in design matrix, calculate predicted value and SE from pooled results
calc.funcresults <- function(biomod, pred.vals){
  coefnames <- names(biomod$analyses[[1]]$coefficients)
  bioname <- strsplit(coefnames[length(pred.vals) + 2], ')')[[1]][2]

  ## Get unique values of biomarker measure (5th-95th percentiles)
  biovals <- sort(unique(model.data[,bioname]))
  bioknots <- rcspline.eval(biovals, nk = 3, knots.only = TRUE)
  biovals <- biovals[biovals >= bioknots[1] & biovals <= bioknots[3]]

  ## Create full design matrix: same values for all covariates;
  ##  differs in biomarker and nonlinear biomarker terms
  designmat <-
    do.call(rbind,
            lapply(biovals, FUN = function(x){
              c(1, pred.vals, x,
                calc.spline(x, k1 = bioknots[1], k2 = bioknots[2], k3 = bioknots[3]))
            }))

  ## Pool model results, get coefficients and vcov matrix
  pooled.mod <- pool(biomod)
  pooled.coefs <- pooled.mod$qbar
  pooled.vcov <- pooled.mod$ubar

  ## Calculate linear predictors and their SEs
  lp <- apply(designmat, MARGIN = 1, FUN = function(x){ sum(pooled.coefs * as.numeric(x)) })
  lp.se <- apply(designmat, MARGIN = 1, FUN = function(x){ sqrt(t(x) %*% pooled.vcov %*% x) })

  ## Calculate LCL, UCLs for linear predictors
  lp.lcl <- lp - qnorm(0.975)*lp.se
  lp.ucl <- lp + qnorm(0.975)*lp.se

  ## Calculate predicted counts, CIs as exp(quantities)
  count.pe <- exp(lp)
  count.lcl <- exp(lp.lcl)
  count.ucl <- exp(lp.ucl)

  ## Bind all results into data frame for plotting
  return(as.data.frame(cbind(biovals, lp, lp.se, count.pe, count.lcl, count.ucl)))
}

@

<<getresults>>=
## Function to format and round number to the same number of digits
rndformat <- function(val, digits = 2){
  format(round(val, digits), nsmall = digits, big.mark = ',')
}

formatp <- function(val){
  ifelse(val < 0.0001, '<0.0001',
  ifelse(val < 0.001, '<0.001',
         rndformat(val, digits = 3)))
}

## Set datadist for summary.rms()
dd <- datadist(model.data); options(datadist = 'dd')

## -- Function to create results table ------------------------------------------------------------
create.results.table <- function(modlist, ## List of model objects (eg, crp.mods)
                                 marker,  ## string with marker prefix (eg, 'crp')
                                 test){   ## string indicating test of interest (eg, 'rbans')

  ## Create initial data frame with results from summary(), anova() for biomarker rows only
  ## For all models in model list with names containing "test",
  ##  take rows of summary() and anova() with rownames containing biomarker;
  ##  concatenate with name of model (eg, "mean.rbans.nowt.3")
  results.data <-
    as.data.frame(do.call(rbind,
                          lapply(grep(test, names(modlist)), FUN = function(x){
                            take.row.sum <- grep(marker, rownames(summary(modlist[[x]])))
                            take.row.anova <- grep(marker, rownames(anova(modlist[[x]])))
                            c(names(modlist)[x],
                              summary(modlist[[x]])[take.row.sum,
                                                    c('Low', 'High', 'Effect',
                                                      'Lower 0.95', 'Upper 0.95')],
                              anova(modlist[[x]])[take.row.anova, 'P'])
                          })))

  ## Set names of resulting data frame; make all variables numeric except model name
  names(results.data) <-
    c('which.mod', 'low', 'high', 'difference', 'lcl', 'ucl', 'pvalue')
  for(i in 2:ncol(results.data)){
    results.data[,i] <- as.numeric(as.character(results.data[,i]))
  }

  ## Reformat into data set with rows = number of biomarker measures,
  ##  cols = measure, reference, comparison, no weights/weights at 3 months,
  ##    no weights/weights at 12 months
  results.data <- results.data %>%
    separate(which.mod, into = c('measure', 'test', 'weight', 'time')) %>%
    mutate(measure.str = ifelse(measure == 'first', 'Log10(First)',
                         ifelse(measure == 'mean', 'Log10(Mean)', '\\% Change')),
           low = rndformat(low),
           high = rndformat(high),
           mod.type = paste(weight, time, sep = '.'),
           results.str = gsub(' +', ' ',
                              paste0(rndformat(difference),
                                     ' (', rndformat(lcl), ', ',
                                     rndformat(ucl), '); P = ',
                                     formatp(pvalue)))) %>%
    dplyr::select(measure.str, mod.type, low, high, results.str) %>%
    spread(key = mod.type, value = results.str)

  results.data[,c('measure.str', 'low', 'high', 'nowt.3', 'wt.3', 'nowt.12', 'wt.12')]
}

## -- Get all results for linear models ------------------------------------------------------------
## Without delirium
crp.rbans.results <- create.results.table(modlist = crp.mods, marker = 'crp', 'rbans')
crp.trailb.results <- create.results.table(modlist = crp.mods, marker = 'crp', 'trailb')
ifngamma.rbans.results <-
  create.results.table(modlist = ifngamma.mods, marker = 'ifngamma', 'rbans')
ifngamma.trailb.results <-
  create.results.table(modlist = ifngamma.mods, marker = 'ifngamma', 'trailb')
il10.rbans.results <- create.results.table(modlist = il10.mods, marker = 'il10', 'rbans')
il10.trailb.results <- create.results.table(modlist = il10.mods, marker = 'il10', 'trailb')
il12.rbans.results <- create.results.table(modlist = il12.mods, marker = 'il12', 'rbans')
il12.trailb.results <- create.results.table(modlist = il12.mods, marker = 'il12', 'trailb')
il1b.rbans.results <- create.results.table(modlist = il1b.mods, marker = 'il1b', 'rbans')
il1b.trailb.results <- create.results.table(modlist = il1b.mods, marker = 'il1b', 'trailb')
il6.rbans.results <- create.results.table(modlist = il6.mods, marker = 'il6', 'rbans')
il6.trailb.results <- create.results.table(modlist = il6.mods, marker = 'il6', 'trailb')
il8.rbans.results <- create.results.table(modlist = il8.mods, marker = 'il8', 'rbans')
il8.trailb.results <- create.results.table(modlist = il8.mods, marker = 'il8', 'trailb')
mmp9.rbans.results <- create.results.table(modlist = mmp9.mods, marker = 'mmp9', 'rbans')
mmp9.trailb.results <- create.results.table(modlist = mmp9.mods, marker = 'mmp9', 'trailb')
proteinc.rbans.results <-
  create.results.table(modlist = proteinc.mods, marker = 'proteinc', 'rbans')
proteinc.trailb.results <-
  create.results.table(modlist = proteinc.mods, marker = 'proteinc', 'trailb')
tnfa.rbans.results <- create.results.table(modlist = tnfa.mods, marker = 'tnfa', 'rbans')
tnfa.trailb.results <- create.results.table(modlist = tnfa.mods, marker = 'tnfa', 'trailb')
tnfr1.rbans.results <- create.results.table(modlist = tnfr1.mods, marker = 'tnfr1', 'rbans')
tnfr1.trailb.results <- create.results.table(modlist = tnfr1.mods, marker = 'tnfr1', 'trailb')

## With delirium
crp.del.rbans.results <- create.results.table(modlist = crp.del.mods, marker = 'crp', 'rbans')
crp.del.trailb.results <- create.results.table(modlist = crp.del.mods, marker = 'crp', 'trailb')
ifngamma.del.rbans.results <-
  create.results.table(modlist = ifngamma.del.mods, marker = 'ifngamma', 'rbans')
ifngamma.del.trailb.results <-
  create.results.table(modlist = ifngamma.del.mods, marker = 'ifngamma', 'trailb')
il10.del.rbans.results <- create.results.table(modlist = il10.del.mods, marker = 'il10', 'rbans')
il10.del.trailb.results <- create.results.table(modlist = il10.del.mods, marker = 'il10', 'trailb')
il12.del.rbans.results <- create.results.table(modlist = il12.del.mods, marker = 'il12', 'rbans')
il12.del.trailb.results <- create.results.table(modlist = il12.del.mods, marker = 'il12', 'trailb')
il1b.del.rbans.results <- create.results.table(modlist = il1b.del.mods, marker = 'il1b', 'rbans')
il1b.del.trailb.results <- create.results.table(modlist = il1b.del.mods, marker = 'il1b', 'trailb')
il6.del.rbans.results <- create.results.table(modlist = il6.del.mods, marker = 'il6', 'rbans')
il6.del.trailb.results <- create.results.table(modlist = il6.del.mods, marker = 'il6', 'trailb')
il8.del.rbans.results <- create.results.table(modlist = il8.del.mods, marker = 'il8', 'rbans')
il8.del.trailb.results <- create.results.table(modlist = il8.del.mods, marker = 'il8', 'trailb')
mmp9.del.rbans.results <- create.results.table(modlist = mmp9.del.mods, marker = 'mmp9', 'rbans')
mmp9.del.trailb.results <- create.results.table(modlist = mmp9.del.mods, marker = 'mmp9', 'trailb')
proteinc.del.rbans.results <-
  create.results.table(modlist = proteinc.del.mods, marker = 'proteinc', 'rbans')
proteinc.del.trailb.results <-
  create.results.table(modlist = proteinc.del.mods, marker = 'proteinc', 'trailb')
tnfa.del.rbans.results <- create.results.table(modlist = tnfa.del.mods, marker = 'tnfa', 'rbans')
tnfa.del.trailb.results <- create.results.table(modlist = tnfa.del.mods, marker = 'tnfa', 'trailb')
tnfr1.del.rbans.results <- create.results.table(modlist = tnfr1.del.mods, marker = 'tnfr1', 'rbans')
tnfr1.del.trailb.results <- create.results.table(modlist = tnfr1.del.mods, marker = 'tnfr1', 'trailb')

## -- Function to print results tables in Latex ----------------------------------------------------
latex.results <- function(resultsdata, markerstr, teststr){
  latex(resultsdata, file = '',
        colheads = c('', 'Ref.', 'Comp.', 'No Weights', 'Weights', 'No Weights', 'Weights'),
        n.cgroup = c(1, 1, 1, 2, 2),
        cgroup = c('', '', '', '3-Month Scores', '12-Month Scores'),
        col.just = c('l', rep('r', ncol(resultsdata) - 1)),
        rowname = NULL,
        title = '',
        where = '!h',
        size = 'small',
        label = paste0('table:', tolower(markerstr), tolower(teststr)),
        caption = paste(markerstr, 'vs', teststr))
}

# ## Spot check a few models
# test1.nowt <- fit.mult.impute(as.formula(paste('rbans.global.score.3 ~',
#                                                gsub('markervar', 'tnfa.first', covar.cog,
#                                                     fixed = TRUE))),
#                               fitter = ols,
#                               xtrans = areg.cog.first.3,
#                               data = model.data.cog.3)
# anova(test1.nowt)
# anova(tnfa.mods$first.rbans.nowt.3)
# summary(test1.nowt)
# summary(tnfa.mods$first.rbans.nowt.3)
#
# test1.wt <- fit.mult.impute(as.formula(paste('rbans.global.score.3 ~',
#                                              gsub('markervar', 'tnfa.first', covar.cog,
#                                                   fixed = TRUE))),
#                             fitter = ols.fix,
#                             xtrans = areg.cog.first.3,
#                             weights = wt.cog.3,
#                             data = model.data.cog.3)
# anova(test1.wt)
# anova(tnfa.mods$first.rbans.wt.3)
# summary(test1.wt)
# summary(tnfa.mods$first.rbans.wt.3)
#
# ## Spot check a few models
# test2.nowt <- fit.mult.impute(as.formula(paste('trail.b.tscore.12 ~',
#                                                gsub('markervar', 'il10.pctchg', covar.cog,
#                                                     fixed = TRUE))),
#                               fitter = ols,
#                               xtrans = areg.cog.pctchg.12,
#                               data = model.data.cog.12)
# anova(test2.nowt)
# anova(il10.mods$pctchg.trailb.nowt.12)
# summary(test2.nowt)
# summary(il10.mods$pctchg.trailb.nowt.12)
#
# test2.wt <- fit.mult.impute(as.formula(paste('trail.b.tscore.12 ~',
#                                              gsub('markervar', 'il10.pctchg', covar.cog,
#                                                   fixed = TRUE))),
#                             fitter = ols.fix,
#                             xtrans = areg.cog.pctchg.12,
#                             weights = wt.cog.12,
#                             data = model.data.cog.12)
# anova(test2.wt)
# anova(il10.mods$pctchg.trailb.wt.12)
# summary(test2.wt)
# summary(il10.mods$pctchg.trailb.wt.12)

## Functions to plot results from a model, weighted and non-weighted on the same panel -------------
test.ylabs <- data.frame(testvar = c('rbans', 'trailb', 'adl', 'faq'),
                         testylab = c('Adjusted RBANS Global Score',
                                      'Adjusted Trails B T-Score',
                                      'Adjusted ADL Score',
                                      'Adjusted FAQ Score'))

## Cognitive outcomes (linear models)
cogresults.plot <- function(modlist, ## List of model objects (eg, crp.mods)
                            test = c('rbans', 'trailb'), ## Test of interest
                            marker, ## String; biomarker prefix (eg, 'crp')
                            xlab.addon = NULL){ ## Text added to X label (eg "Models Without Delirium")

  ## For all models in modlist which involve test of interest, get predicted values;
  ##  bind all predicted values in single data set, adding model name (eg,
  ##  mean.rbans.nowt.3) as variable
  pred.data <- bind_rows(lapply(grep(test, names(modlist)), FUN = function(x){

    markervar <- grep(marker, names(coef(modlist[[x]])), value = TRUE)[1]

    ## If model is looking at ADL or FAQ (POLR model), need predictions on probability scale
    if(test %in% c('adl', 'faq')){
      pred.eval <-
        paste('as.data.frame(Predict(modlist[[x]],', markervar, '= NA, fun = plogis))')
    } else{
      pred.eval <- paste('as.data.frame(Predict(modlist[[x]],', markervar, '= NA))')
    }
    tmp <- eval(parse(text = pred.eval))
    names(tmp) <- gsub(markervar, 'markervar', names(tmp))
    tmp$modtype <- names(modlist)[x]
    tmp
  })) %>%
    ## Separate model name variable into pieces and use to create factors for plotting
    separate(modtype, into = c('measure', 'test', 'weight', 'time')) %>%
    mutate(measurestr = factor(ifelse(measure == 'mean', 1,
                               ifelse(measure == 'first', 2, 3)),
                               levels = 1:3, labels = c('Log10(Mean)', 'Log10(First)', '% Change')),
           timestr = factor(ifelse(time == 3, 1, 2),
                            levels = 1:2, labels = c('3 Months', '12 Months')))

  ## Create X label string
  if(is.null(xlab.addon)){
    use.xlab <- paste('Measure of', toupper(marker))
  } else{
    use.xlab <- paste0('Measure of ', toupper(marker), ', ', xlab.addon)
  }

  ## Plot, with biomarker measures as columns and time points as rows
  marker.plot <- ggplot(aes(x = markervar), data = pred.data) +
    facet_grid(timestr ~ measurestr, scales = 'free_x') +
    geom_ribbon(aes(ymin = lower, ymax = upper, fill = weight), alpha = 0.4) +
    geom_line(aes(y = yhat, colour = weight)) +
    scale_colour_discrete(name = '', labels = c('Unweighted', 'Weighted')) +
    scale_fill_discrete(name = '', labels = c('Unweighted', 'Weighted')) +
    xlab(use.xlab) +
    ylab(test.ylabs[match(test, test.ylabs$testvar), 'testylab']) +
    theme_bw() +
    theme(legend.position = 'bottom',
          legend.key.size = unit(0.25, "cm"),
          legend.text = element_text(size = 8),
          axis.ticks = element_line(colour = 'grey50'),
          axis.text = element_text(size = 8),
          axis.title.x = element_text(vjust = 0),
          strip.background = element_blank(),
          panel.margin = unit(0.5, 'lines'))

  return(marker.plot)
}

## Functional outcomes (negative binomial models)
funcresults.plot <- function(modlist,
                             plist,
                             test = c('adl', 'faq'),
                             marker,
                             xlab.addon = NULL){

  ## Create data frame of p-value strings to add to each plot
  p.data <- data.frame(modtype = names(plist),
                       pval = as.numeric(plist))
  p.data <- p.data[p.data$modtype %in% grep(test, p.data$modtype, value = TRUE),] %>%
    ## Separate model name variable into pieces and use to create factors for plotting
    separate(modtype, into = c('p', 'measure', 'test', 'weight', 'time')) %>%
    mutate(measurestr = factor(ifelse(measure == 'mean', 1,
                               ifelse(measure == 'first', 2, 3)),
                               levels = 1:3, labels = c('Log10(Mean)', 'Log10(First)', '% Change')),
           timestr = factor(ifelse(time == 3, 1, 2),
                            levels = 1:2, labels = c('3 Months', '12 Months'))) %>%
    dplyr::select(-p, -measure, -test) %>%
    spread(key = weight, value = pval) %>%
    mutate(pval.string = paste0('Unweighted p: ', formatp(nowt),
                                '\nWeighted p: ', formatp(wt)))

  ## For all models in modlist which involve test of interest, get predicted values;
  ##  bind all predicted values in single data set, adding model name (eg,
  ##  mean.rbans.nowt.3) as variable

  ## Is delirium included in model?
  if(length(grep('del.s.imp', names(coef(modlist[[1]])))) > 0){
    use.pred.vals <- pred.del.vec
  } else{
    use.pred.vals <- pred.vec
  }

  pred.data <- bind_rows(lapply(grep(test, names(modlist)), FUN = function(x){
    tmp <- calc.funcresults(modlist[[x]], use.pred.vals)
    tmp$modtype <- names(modlist)[x]
    tmp
  })) %>%
    ## Separate model name variable into pieces and use to create factors for plotting
    separate(modtype, into = c('measure', 'test', 'weight', 'time')) %>%
    mutate(measurestr = factor(ifelse(measure == 'mean', 1,
                               ifelse(measure == 'first', 2, 3)),
                               levels = 1:3, labels = c('Log10(Mean)', 'Log10(First)', '% Change')),
           timestr = factor(ifelse(time == 3, 1, 2),
                            levels = 1:2, labels = c('3 Months', '12 Months')))

  ## Get X and Y values from pred.data for adding p-value text, add to p.data
  xvals <- group_by(pred.data, measurestr) %>% summarise(x.val = max(biovals))
  p.data <- p.data %>% left_join(xvals, by = 'measurestr') %>%
    mutate(y.val = max(pred.data$count.ucl, na.rm = TRUE))

  ## Create X label string
  if(is.null(xlab.addon)){
    use.xlab <- paste('Measure of', toupper(marker))
  } else{
    use.xlab <- paste0('Measure of ', toupper(marker), ', ', xlab.addon)
  }


  ## Plot, with biomarker measures as columns and time points as rows
  marker.plot <- ggplot(aes(x = biovals), data = pred.data) +
    facet_grid(timestr ~ measurestr, scales = 'free_x') +
    geom_ribbon(aes(ymin = count.lcl, ymax = count.ucl, fill = weight), alpha = 0.4) +
    geom_line(aes(y = count.pe, colour = weight)) +
    geom_text(aes(x = x.val, y = y.val, label = pval.string),
              data = p.data, fontface = 'bold', hjust = 1, vjust = 1, size = 2) +
    scale_colour_discrete(name = '', labels = c('Unweighted', 'Weighted')) +
    scale_fill_discrete(name = '', labels = c('Unweighted', 'Weighted')) +
    xlab(use.xlab) +
    ylab(test.ylabs[match(test, test.ylabs$testvar), 'testylab']) +
    theme_bw() +
    theme(legend.position = 'bottom',
          legend.key.size = unit(0.25, "cm"),
          legend.text = element_text(size = 8),
          axis.ticks = element_line(colour = 'grey50'),
          axis.text = element_text(size = 8),
          axis.title.x = element_text(vjust = 0),
          strip.background = element_blank(),
          panel.margin = unit(0.5, 'lines'))

  return(marker.plot)

}

@

\clearpage
\section{Biomarkers vs. LTCI Outcomes}
We used linear regression to examine the relationships between biomarkers, measured three different
ways, and RBANS and Trails B T-scores at 3- and 12-month followup. Summary results for each
association follow, with detailed model results to come. Point esimates (confidence limits)
represent the adjusted difference in test scores for a patient at the 75th vs. the 25th percentile
of the biomarker measure, assuming all other covariates are the same.

Models are performed using multiple imputation; all patients who had at least partial cognitive
testing data at a given time point are included in the models. All models included the following
covariates; with the exception of dexmedetomidine and haloperidol, which had too few unique values,
all continuous variables (including biomarker) were allowed to have a nonlinear association with the
outcome using restricted cubic splines. Mean and first biomarker were transformed by taking the base
10 logarithm, so that extremely high values did not cause problems with model convergence.

\begin{itemize}
\item Age at enrollment
\item Charlson score
\item Years of education
\item IQCODE score at enrollment
\item Framingham stroke risk score
\item Mean 24h doses of benzodiazepines (midazolam equivalents), opioids (fentanyl equivalents),
propofol, dexmedetomidine, and haloperidol in the ICU
\end{itemize}

We also ran the above models adding delirium as a covariate, to help investigate any potential
mediation effects from delirium.

\clearpage
\subsection{CRP}
\subsubsection{RBANS}
<<printcrprbanstables, results='asis'>>=
latex.results(crp.rbans.results, 'CRP', 'RBANS Global Scores, Models Without Delirium')
latex.results(crp.del.rbans.results, 'CRP', 'RBANS Global Scores, Models With Delirium')
@

\clearpage
<<printcrprbansplots, results='asis', fig.cap = 'CRP vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = crp.mods, test = 'rbans', marker = 'crp',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = crp.del.mods, test = 'rbans', marker = 'crp',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{Trails B}
<<printcrptrailbtables, results='asis'>>=
latex.results(crp.trailb.results, 'CRP', 'Trails B T-Scores, Models Without Delirium')
latex.results(crp.del.trailb.results, 'CRP', 'Trails B T-Scores, Models With Delirium')
@

\clearpage
<<printcrptrailbplots, results='asis', fig.cap = 'CRP vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = crp.mods, test = 'trailb', marker = 'crp',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = crp.del.mods, test = 'trailb', marker = 'crp',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsection{IFN-$\gamma$}
\subsubsection{RBANS}
<<printifngammarbanstables, results='asis'>>=
latex.results(ifngamma.rbans.results, 'ifngamma', 'RBANS Global Scores, Models Without Delirium')
latex.results(ifngamma.del.rbans.results, 'ifngamma', 'RBANS Global Scores, Models With Delirium')
@

\clearpage
<<printifngammarbansplots, results='asis', fig.cap = 'IFN-gamma vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = ifngamma.mods, test = 'rbans', marker = 'ifngamma',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = ifngamma.del.mods, test = 'rbans', marker = 'ifngamma',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{Trails B}
<<printifngammatrailbtables, results='asis'>>=
latex.results(ifngamma.trailb.results, 'IFN-gamma', 'Trails B T-Scores, Models Without Delirium')
latex.results(ifngamma.del.trailb.results, 'IFN-gamma', 'Trails B T-Scores, Models With Delirium')
@

\clearpage
<<printifngammatrailbplots, results='asis', fig.cap = 'IFN-gamma vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = ifngamma.mods, test = 'trailb', marker = 'ifngamma',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = ifngamma.del.mods, test = 'trailb', marker = 'ifngamma',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsection{IL-10}
\subsubsection{RBANS}
<<printil10rbanstables, results='asis'>>=
latex.results(il10.rbans.results, 'IL-10', 'RBANS Global Scores, Models Without Delirium')
latex.results(il10.del.rbans.results, 'IL-10', 'RBANS Global Scores, Models With Delirium')
@

\clearpage
<<printil10rbansplots, results='asis', fig.cap = 'IL-10 vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = il10.mods, test = 'rbans', marker = 'il10',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = il10.del.mods, test = 'rbans', marker = 'il10',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{Trails B}
<<printil10trailbtables, results='asis'>>=
latex.results(il10.trailb.results, 'il10', 'Trails B T-Scores, Models Without Delirium')
latex.results(il10.del.trailb.results, 'il10', 'Trails B T-Scores, Models With Delirium')
@

\clearpage
<<printil10trailbplots, results='asis', fig.cap = 'IL-10 vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = il10.mods, test = 'trailb', marker = 'il10',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = il10.del.mods, test = 'trailb', marker = 'il10',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsection{IL-12}
\subsubsection{RBANS}
<<printil12rbanstables, results='asis'>>=
latex.results(il12.rbans.results, 'IL-12', 'RBANS Global Scores, Models Without Delirium')
latex.results(il12.del.rbans.results, 'IL-12', 'RBANS Global Scores, Models With Delirium')
@

\clearpage
<<printil12rbansplots, results='asis', fig.cap = 'IL-12 vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = il12.mods, test = 'rbans', marker = 'il12',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = il12.del.mods, test = 'rbans', marker = 'il12',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{Trails B}
<<printil12trailbtables, results='asis'>>=
latex.results(il12.trailb.results, 'IL-12', 'Trails B T-Scores, Models Without Delirium')
latex.results(il12.del.trailb.results, 'IL-12', 'Trails B T-Scores, Models With Delirium')
@

\clearpage
<<printil12trailbplots, results='asis', fig.cap = 'IL-12 vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = il12.mods, test = 'trailb', marker = 'il12',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = il12.del.mods, test = 'trailb', marker = 'il12',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsection{IL-1$\beta$}
\subsubsection{RBANS}
<<printil1brbanstables, results='asis'>>=
latex.results(il1b.rbans.results, 'IL-1b', 'RBANS Global Scores, Models Without Delirium')
latex.results(il1b.del.rbans.results, 'IL-1b', 'RBANS Global Scores, Models With Delirium')
@

\clearpage
<<printil1brbansplots, results='asis', fig.cap = 'IL1b vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = il1b.mods, test = 'rbans', marker = 'il1b',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = il1b.del.mods, test = 'rbans', marker = 'il1b',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{Trails B}
<<printil1btrailbtables, results='asis'>>=
latex.results(il1b.trailb.results, 'IL-1b', 'Trails B T-Scores, Models Without Delirium')
latex.results(il1b.del.trailb.results, 'IL-1b', 'Trails B T-Scores, Models With Delirium')
@

\clearpage
<<printil1btrailbplots, results='asis', fig.cap = 'IL1b vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = il1b.mods, test = 'trailb', marker = 'il1b',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = il1b.del.mods, test = 'trailb', marker = 'il1b',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsection{IL-6}
\subsubsection{RBANS}
<<printil6rbanstables, results='asis'>>=
latex.results(il6.rbans.results, 'IL-6', 'RBANS Global Scores, Models Without Delirium')
latex.results(il6.del.rbans.results, 'IL-6', 'RBANS Global Scores, Models With Delirium')
@

\clearpage
<<printil6rbansplots, results='asis', fig.cap = 'IL-6 vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = il6.mods, test = 'rbans', marker = 'il6',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = il6.del.mods, test = 'rbans', marker = 'il6',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{Trails B}
<<printil6trailbtables, results='asis'>>=
latex.results(il6.trailb.results, 'IL-6', 'Trails B T-Scores, Models Without Delirium')
latex.results(il6.del.trailb.results, 'IL-6', 'Trails B T-Scores, Models With Delirium')
@

\clearpage
<<printil6trailbplots, results='asis', fig.cap = 'IL-6 vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = il6.mods, test = 'trailb', marker = 'il6',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = il6.del.mods, test = 'trailb', marker = 'il6',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsection{IL-8}
\subsubsection{RBANS}
<<printil8rbanstables, results='asis'>>=
latex.results(il8.rbans.results, 'IL-8', 'RBANS Global Scores, Models Without Delirium')
latex.results(il8.del.rbans.results, 'IL-8', 'RBANS Global Scores, Models With Delirium')
@

\clearpage
<<printil8rbansplots, results='asis', fig.cap = 'IL-8 vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = il8.mods, test = 'rbans', marker = 'il8',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = il8.del.mods, test = 'rbans', marker = 'il8',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{Trails B}
<<printil8trailbtables, results='asis'>>=
latex.results(il8.trailb.results, 'IL-8', 'Trails B T-Scores, Models Without Delirium')
latex.results(il8.del.trailb.results, 'IL-8', 'Trails B T-Scores, Models With Delirium')
@

\clearpage
<<printil8trailbplots, results='asis', fig.cap = 'IL-8 vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = il8.mods, test = 'trailb', marker = 'il8',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = il8.del.mods, test = 'trailb', marker = 'il8',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsection{MMP9}
\subsubsection{RBANS}
<<printmmp9rbanstables, results='asis'>>=
latex.results(mmp9.rbans.results, 'MMP9', 'RBANS Global Scores, Models Without Delirium')
latex.results(mmp9.del.rbans.results, 'MMP9', 'RBANS Global Scores, Models With Delirium')
@

\clearpage
<<printmmp9rbansplots, results='asis', fig.cap = 'MMP9 vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = mmp9.mods, test = 'rbans', marker = 'mmp9',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = mmp9.del.mods, test = 'rbans', marker = 'mmp9',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{Trails B}
<<printmmp9trailbtables, results='asis'>>=
latex.results(mmp9.trailb.results, 'MMP9', 'Trails B T-Scores, Models Without Delirium')
latex.results(mmp9.del.trailb.results, 'MMP9', 'Trails B T-Scores, Models With Delirium')
@

\clearpage
<<printmmp9trailbplots, results='asis', fig.cap = 'MMP9 vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = mmp9.mods, test = 'trailb', marker = 'mmp9',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = mmp9.del.mods, test = 'trailb', marker = 'mmp9',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@
\clearpage
\subsection{Protein C}
\subsubsection{RBANS}
<<printproteincrbanstables, results='asis'>>=
latex.results(proteinc.rbans.results, 'Protein C', 'RBANS Global Scores, Models Without Delirium')
latex.results(proteinc.del.rbans.results, 'Protein c', 'RBANS Global Scores, Models With Delirium')
@

\clearpage
<<printproteincrbansplots, results='asis', fig.cap = 'Protein C vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = proteinc.mods, test = 'rbans', marker = 'proteinc',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = proteinc.del.mods, test = 'rbans', marker = 'proteinc',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{Trails B}
<<printproteinctrailbtables, results='asis'>>=
latex.results(proteinc.trailb.results, 'Protein C', 'Trails B T-Scores, Models Without Delirium')
latex.results(proteinc.del.trailb.results, 'Protein C', 'Trails B T-Scores, Models With Delirium')
@

\clearpage
<<printproteinctrailbplots, results='asis', fig.cap = 'Protein C vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = proteinc.mods, test = 'trailb', marker = 'proteinc',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = proteinc.del.mods, test = 'trailb', marker = 'proteinc',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsection{TNF$\alpha$}
\subsubsection{RBANS}
<<printtnfarbanstables, results='asis'>>=
latex.results(tnfa.rbans.results, 'TNF-alpha', 'RBANS Global Scores, Models Without Delirium')
latex.results(tnfa.del.rbans.results, 'TNF-alpha', 'RBANS Global Scores, Models With Delirium')
@

\clearpage
<<printtnfarbansplots, results='asis', fig.cap = 'TNF-alpha vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = tnfa.mods, test = 'rbans', marker = 'tnfa',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = tnfa.del.mods, test = 'rbans', marker = 'tnfa',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{Trails B}
<<printtnfatrailbtables, results='asis'>>=
latex.results(tnfa.trailb.results, 'TNF-alpha', 'Trails B T-Scores, Models Without Delirium')
latex.results(tnfa.del.trailb.results, 'TNF-alpha', 'Trails B T-Scores, Models With Delirium')
@

\clearpage
<<printtnfatrailbplots, results='asis', fig.cap = 'TNF-alpha vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = tnfa.mods, test = 'trailb', marker = 'tnfa',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = tnfa.del.mods, test = 'trailb', marker = 'tnfa',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsection{TNFR1}
\subsubsection{RBANS}
<<printtnfr1rbanstables, results='asis'>>=
latex.results(tnfr1.rbans.results, 'TNFR1', 'RBANS Global Scores, Models Without Delirium')
latex.results(tnfr1.del.rbans.results, 'TNFR1', 'RBANS Global Scores, Models With Delirium')
@

\clearpage
<<printtnfr1rbansplots, results='asis', fig.cap = 'TNFR1 vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = tnfr1.mods, test = 'rbans', marker = 'tnfr1',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = tnfr1.del.mods, test = 'rbans', marker = 'tnfr1',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{Trails B}
<<printtnfr1trailbtables, results='asis'>>=
latex.results(tnfr1.trailb.results, 'TNFR1', 'Trails B T-Scores, Models Without Delirium')
latex.results(tnfr1.del.trailb.results, 'TNFR1', 'Trails B T-Scores, Models With Delirium')
@

\clearpage
<<printtnfr1trailbplots, results='asis', fig.cap = 'TNFR1 vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 7.5, fig.pos = '!h'>>=
multiplot(cogresults.plot(modlist = tnfr1.mods, test = 'trailb', marker = 'tnfr1',
                          xlab.addon = 'Models Without Delirium'),
          cogresults.plot(modlist = tnfr1.del.mods, test = 'trailb', marker = 'tnfr1',
                          xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\section{Biomarkers vs. Long-Term Functional Outcomes}
We used negative binomial regression to examine the relationships between biomarkers, measured
three different ways, and Katz ADL and FAQ scores at 3- and 12-month followup. P-values are
calculated using the likelihood method, comparing models with the biomarker terms to models without
those terms (but including all other covariates).

Models are performed using multiple imputation; all patients who had at least partial functional
testing data at a given time point are included in the models. All models included the following
covariates; all covariates are forced to be linear except for the biomarkers, which are allowed to
have a nonlinear relationship with the outcome using restricted cubic splines. Mean and first
biomarker were transformed by taking the base 10 logarithm, so that extremely high values did not
cause problems with model convergence.

\begin{itemize}
\item Age at enrollment
\item Charlson score
\item Years of education
\item IQCODE score at enrollment
\item ADL score at study enrollment
\item FAQ score at study enrollment
\item Mean 24h doses of benzodiazepines (midazolam equivalents), opioids (fentanyl equivalents),
propofol, dexmedetomidine, and haloperidol in the ICU
\end{itemize}

We also ran the above models adding delirium as a covariate, to help investigate any potential
mediation effects from delirium.

\clearpage
\subsection{CRP}
\subsubsection{ADL}
<<printcrpadl, results='asis', fig.cap = 'CRP vs. ADL Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = crp.mods, plist = crp.func.pvals, test = 'adl',
                           marker = 'crp', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = crp.del.mods, plist = crp.del.func.pvals, test = 'adl',
                           marker = 'crp', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{FAQ}
<<printcrpfaq, results='asis', fig.cap = 'CRP vs. FAQ Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = crp.mods, plist = crp.func.pvals, test = 'faq',
                           marker = 'crp', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = crp.del.mods, plist = crp.del.func.pvals, test = 'faq',
                           marker = 'crp', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsection{IFN-$\gamma$}
\subsubsection{ADL}
<<printifngammaadl, results='asis', fig.cap = 'IFN-gamma vs. ADL Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = ifngamma.mods, plist = ifngamma.func.pvals, test = 'adl',
                           marker = 'ifngamma', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = ifngamma.del.mods, plist = ifngamma.del.func.pvals,
                           test = 'adl', marker = 'ifngamma', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{FAQ}
<<printifngammafaq, results='asis', fig.cap = 'IFN-gamma vs. FAQ Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = ifngamma.mods, plist = ifngamma.func.pvals, test = 'faq',
                           marker = 'ifngamma', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = ifngamma.del.mods, plist = ifngamma.del.func.pvals,
                           test = 'faq', marker = 'ifngamma', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsection{IL-10}
\subsubsection{ADL}
<<printil10adl, results='asis', fig.cap = 'IL-10 vs. ADL Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = il10.mods, plist = il10.func.pvals, test = 'adl',
                           marker = 'il10', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = il10.del.mods, plist = il10.del.func.pvals, test = 'adl',
                           marker = 'il10', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{FAQ}
<<printil10faq, results='asis', fig.cap = 'IL-10 vs. FAQ Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = il10.mods, plist = il10.func.pvals, test = 'faq',
                           marker = 'il10', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = il10.del.mods, plist = il10.del.func.pvals, test = 'faq',
                           marker = 'il10', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsection{IL-12}
\subsubsection{ADL}
<<printil12adl, results='asis', fig.cap = 'IL-12 vs. ADL Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = il12.mods, plist = il12.func.pvals, test = 'adl',
                           marker = 'il12', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = il12.del.mods, plist = il12.del.func.pvals, test = 'adl',
                           marker = 'il12', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{FAQ}
<<printil12faq, results='asis', fig.cap = 'IL-12 vs. FAQ Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = il12.mods, plist = il12.func.pvals, test = 'faq',
                           marker = 'il12', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = il12.del.mods, plist = il12.del.func.pvals, test = 'faq',
                           marker = 'il12', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsection{IL-1$\beta$}
\subsubsection{ADL}
<<printil1badl, results='asis', fig.cap = 'IL1b vs. ADL Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = il1b.mods, plist = il1b.func.pvals, test = 'adl',
                           marker = 'il1b', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = il1b.del.mods, plist = il1b.del.func.pvals, test = 'adl',
                           marker = 'il1b', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{FAQ}
<<printil1bfaq, results='asis', fig.cap = 'IL1b vs. FAQ Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = il1b.mods, plist = il1b.func.pvals, test = 'faq',
                           marker = 'il1b', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = il1b.del.mods, plist = il1b.del.func.pvals, test = 'faq',
                           marker = 'il1b', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsection{IL-6}
\subsubsection{ADL}
<<printil6adl, results='asis', fig.cap = 'IL-6 vs. ADL Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = il6.mods, plist = il6.func.pvals, test = 'adl',
                           marker = 'il6', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = il6.del.mods, plist = il6.del.func.pvals, test = 'adl',
                           marker = 'il6', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{FAQ}
<<printil6faq, results='asis', fig.cap = 'IL-6 vs. FAQ Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = il6.mods, plist = il6.func.pvals, test = 'faq',
                           marker = 'il6', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = il6.del.mods, plist = il6.del.func.pvals, test = 'faq',
                           marker = 'il6', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsection{IL-8}
\subsubsection{ADL}
<<printil8adl, results='asis', fig.cap = 'IL-8 vs. ADL Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = il8.mods, plist = il8.func.pvals, test = 'adl',
                           marker = 'il8', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = il8.del.mods, plist = il8.del.func.pvals, test = 'adl',
                           marker = 'il8', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{FAQ}
<<printil8faq, results='asis', fig.cap = 'IL-8 vs. FAQ Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = il8.mods, plist = il8.func.pvals, test = 'faq',
                           marker = 'il8', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = il8.del.mods, plist = il8.del.func.pvals, test = 'faq',
                           marker = 'il8', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsection{MMP9}
\subsubsection{ADL}
<<printmmp9adl, results='asis', fig.cap = 'MMP9 vs. ADL Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = mmp9.mods, plist = mmp9.func.pvals, test = 'adl',
                           marker = 'mmp9', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = mmp9.del.mods, plist = mmp9.del.func.pvals, test = 'adl',
                           marker = 'mmp9', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{FAQ}
<<printmmp9faq, results='asis', fig.cap = 'MMP9 vs. FAQ Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = mmp9.mods, plist = mmp9.func.pvals, test = 'faq',
                           marker = 'mmp9', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = mmp9.del.mods, plist = mmp9.del.func.pvals, test = 'faq',
                           marker = 'mmp9', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsection{Protein C}
\subsubsection{ADL}
<<printproteincadl, results='asis', fig.cap = 'Protein C vs. ADL Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = proteinc.mods, plist = proteinc.func.pvals, test = 'adl',
                           marker = 'proteinc', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = proteinc.del.mods, plist = proteinc.del.func.pvals, test = 'adl',
                           marker = 'proteinc', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{FAQ}
<<printproteincfaq, results='asis', fig.cap = 'Protein C vs. FAQ Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = proteinc.mods, plist = proteinc.func.pvals, test = 'faq',
                           marker = 'proteinc', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = proteinc.del.mods, plist = proteinc.del.func.pvals, test = 'faq',
                           marker = 'proteinc', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsection{TNF$\alpha$}
\subsubsection{ADL}
<<printtnfaadl, results='asis', fig.cap = 'TNF-alpha vs. ADL Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = tnfa.mods, plist = tnfa.func.pvals, test = 'adl',
                           marker = 'tnfa', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = tnfa.del.mods, plist = tnfa.del.func.pvals, test = 'adl',
                           marker = 'tnfa', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{FAQ}
<<printtnfafaq, results='asis', fig.cap = 'TNF-alpha vs. FAQ Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = tnfa.mods, plist = tnfa.func.pvals, test = 'faq',
                           marker = 'tnfa', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = tnfa.del.mods, plist = tnfa.del.func.pvals, test = 'faq',
                           marker = 'tnfa', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsection{TNFR1}
\subsubsection{ADL}
<<printtnfr1adl, results='asis', fig.cap = 'TNFR1 vs. ADL Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = tnfr1.mods, plist = tnfr1.func.pvals, test = 'adl',
                           marker = 'tnfr1', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = tnfr1.del.mods, plist = tnfr1.del.func.pvals, test = 'adl',
                           marker = 'tnfr1', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\clearpage
\subsubsection{FAQ}
<<printtnfr1faq, results='asis', fig.cap = 'TNFR1 vs. FAQ Scores', fig.align = 'center', fig.width = 10, fig.height = 6.5, fig.pos = '!h'>>=
multiplot(funcresults.plot(modlist = tnfr1.mods, plist = tnfr1.func.pvals, test = 'faq',
                           marker = 'tnfr1', xlab.addon = 'Models Without Delirium'),
          funcresults.plot(modlist = tnfr1.del.mods, plist = tnfr1.del.func.pvals, test = 'faq',
                           marker = 'tnfr1', xlab.addon = 'Models With Delirium'),
          layout = matrix(1:2, ncol = 1))

@

\end{landscape}

\end{document}
