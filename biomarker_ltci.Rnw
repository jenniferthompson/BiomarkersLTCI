%% -- Specially formatted Latex comment tells RStudio to compile PDF with knitr
% !Rnw weave = knitr

\documentclass{article}

%\usepackage[margin=.5in, landscape]{geometry} %resets margins
\usepackage[margin=.5in]{geometry} %resets margins
\usepackage{hyperref}
\usepackage{lscape}
\usepackage{pdfpages}

\title{BRAIN-ICU: Biomarkers vs. Long-Term Cognitive and Functional Outcomes}
\date{\today}
\author{Jennifer Thompson, MPH; Supervisor: Rameela Chandrasekhar, PhD}
\begin{document}
\maketitle
\tableofcontents
\clearpage

<<setup, include=FALSE, results='hide', cache=FALSE>>=
opts_chunk$set(echo=FALSE, warning = FALSE, message = FALSE, cache = FALSE, error = FALSE, results='hide')
options(replace.assign = TRUE, width = 90)

library(rms)
library(caTools)
library(ggplot2)
library(dplyr)
library(tidyr)

@

<<fxnsetup>>=
## -- Function to print model diagnostics ----------------------------------------------------------
ols.diagnostics <- function(model.obj, outcome.string, title.string){
  ## fit.mult.impute objects work differently than non-imputed objects; use residuals and fitted
  ##  values from model object directly rather than resid() and fitted()
  if('fit.mult.impute' %in% class(model.obj)){
    plot(model.obj$residuals ~ model.obj$fitted.values,
         xlab = paste('Predicted', outcome.string),
         ylab = paste('Model residual'),
         main = paste('RP plot,', title.string),
         col = 'turquoise4')
    abline(h = 0)
    qqnorm(model.obj$residuals, datax = TRUE, main = paste('Q-Q of residuals,', title.string))
  } else{
    plot(resid(model.obj) ~ fitted(model.obj),
         xlab = paste('Predicted', outcome.string),
         ylab = paste('Model residual'),
         main = paste('RP plot,', title.string),
         col = 'turquoise4')
    abline(h = 0)
    qqnorm(resid(model.obj), datax = TRUE, main = paste('Q-Q of residuals,', title.string))
  }
}

## -- Function to graphically examine proportional odds assumption ---------------------------------
po.assume <- function(model.obj,          ## model.obj: model of class lrm()
                      cuts,               ## cuts: sequence of points to cut outcome
                      plot.vars = NULL,   ## which variables to plot (defaults to all variables)
                      mfrow.auto = FALSE, ## whether to determine par(mfrow) automatically
                      model.data){        ## model.data: data used to fit model
  ## Create data set for each coefficient in main model
  cof.names <- names(coef(model.obj))
  all.rows <- 1:length(cof.names)
  int.rows <- grep('y>=', cof.names, fixed = TRUE)
  take.rows <- all.rows[all.rows %nin% int.rows]
  cof <- data.frame(var = cof.names[take.rows])

  ## Extract formula from model call
  comp.call <- as.character(formula(model.obj))
  model.outcome <- comp.call[2]
  model.formula <- comp.call[3]

  for(k in 1:length(cuts)){
    cut.mod <-
      lrm(as.formula(paste0('as.numeric(', model.outcome, ' >= ', cuts[k], ') ~ ', model.formula)),
          data = model.data)

    cof.temp <- data.frame(var = names(coef(cut.mod)),
                           hold.place = coef(cut.mod))

    cof <- merge(cof, cof.temp, all.x = TRUE, all.y = FALSE)
    names(cof) <- gsub('hold.place', paste('coef.cut', cuts[k], sep = '.'), names(cof))
  }

  ## Subset in case some splines didn't make requested number of knots
  cof <- cof[rowSums(is.na(cof[,2:ncol(cof)])) == 0,]

  ## If plot.vars is not null, take only rows for variables of interest
  if(!is.null(plot.vars)){
    cof <- cof[grep(plot.vars, cof$var),]
  }

  if(mfrow.auto){
    ## Get number of rows/columns for plot (plot as close to square as possible)
    plot.rows <- ceiling(sqrt(nrow(cof)))
    par(mfrow = c(plot.rows, plot.rows), mar = c(2, 4, 1, 1))
  }

  for(k in 1:nrow(cof)){
    plot(cuts, cof[k, 2:ncol(cof)], type = 'l', ylab = '')
    title(ylab = cof[k, 'var'], line = 2.5)
    abline(h = 0, lty = 2)
  }
}

## Create "fixed" versions of ols() and lrm() to work around bug w/ weights argument (thanks, Cole!)
ols.fix <- ols
trace(ols.fix, quote(m$weights <- substitute(weights)), at=9)

lrm.fix <- lrm
trace(lrm.fix, quote(m$weights <- substitute(weights)), at=9)

@

<<loaddata>>=
## Create vector of variable names of each biomarker
biomarker.vnames <- paste0(c('crp', 'ifngamma', 'il10', 'il12', 'il1b', 'il6', 'il8', 'mmp9',
                             'proteinc', 'tnfa', 'tnfr1'),
                           '.imp')

## Load all BRAIN data
if(Sys.info()['sysname'] == 'Darwin'){
  load('/Volumes/thomps23/ICUDelirium/BRAINICU/braindata.Rdata')
  source('/Volumes/thomps23/R/multiplot.r')
} else{
  load('/home/thomps23/ICUDelirium/BRAINICU/braindata.Rdata')
  source('/home/thomps23/R/multiplot.r')
}

## -- Insert data management to combine BRAIN, MIND data sets --------------------------------------

## For now...
all.oneobs <- brain.oneobs
all.daily <- brain.daily
all.fu <- brain.fu

## Create cube root versions of all mean 24h ICU drug variables
all.oneobs$mean.benz.cube <- all.oneobs$mean.benz.icu^(1/3)
all.oneobs$mean.op.cube <- all.oneobs$mean.op.new.icu^(1/3)
all.oneobs$mean.prop.cube <- all.oneobs$mean.prop.icu^(1/3)
all.oneobs$mean.dex.cube <- all.oneobs$mean.dex.icu^(1/3)
all.oneobs$mean.hal.cube <- all.oneobs$mean.hal.icu^(1/3)

label(all.oneobs$mean.benz.cube) <- 'Mean 24h benzos in ICU, cube root'
label(all.oneobs$mean.op.cube) <- 'Mean 24h opioids in ICU, cube root'
label(all.oneobs$mean.prop.cube) <- 'Mean 24h propofol in ICU, cube root'
label(all.oneobs$mean.dex.cube) <- 'Mean 24h dex in ICU, cube root'
label(all.oneobs$mean.hal.cube) <- 'Mean 24h haldol in ICU, cube root'

@

The following analyses examine the associations between a panel of \Sexpr{length(biomarker.vnames)}
biomarkers measured in the BRAIN-ICU and MIND-ICU cohorts and long-term cognitive and functional
outcomes.

\section{Cohort Definitions}
Cohorts are defined separately for each time point (3 and 12 months) and for cognitive and
functional outcomes, since patients could have at least some functional testing done by phone.
Patients are included in the cognitive cohort if they had at least one cognitive test performed at
the specified time point (including any RBANS domains, Trails A, Trails B and/or MMSE). Patients
are included in the functional cohort if they had at least one functional test performed at the
specified time point (BDI-II, PCL, ADL, FAQ, SF36 mental or physical component, and/or CSHA frailty).

\section{Model Weighting}
Each model is performed on all survivors in the followup cohort of interest. In order to address selection bias from survival and attrition - i.e., the fact that patients who are alive and have
long-term followup data are likely different than patients who do not - we also added inverse
probability weights to each model in a second version. These weights are calculated by modeling the probability that each patient in the original in-hospital cohort contributes to each followup cohort, then taking the inverse of this estimated weight. In our weighting mdoels, we included age; Charlson
score; education; IQCODE; Framingham stroke risk score; mean 24-hour doses of benzodiazepines,
opioids, propofol, dexmedetomidine, and haloperidol (cube root transformed); duration of severe
sepsis, delirium, and coma; and mean modified SOFA.

Figure \ref{fig:weighthist} shows the distribution of these inverse probability weights and the
number of patients included in the final cohorts.

<<datamgmt>>=
## -- Indicators for whether each patient is in cognitive or functional analysis cohort at each time
## Create vectors of tests included in "partial data" criteria at each time point for each cohort
cog.varnames <- c('rbans.global.score', 'rbans.immmemory.tscore', 'rbans.visuo.tscore',
                  'rbans.delayedmem.tscore', 'rbans.language.tscore', 'trail.a.tscore',
                  'trail.b.tscore', 'mmse.tscore')
func.varnames <- c('bdi.totscore', 'pcl.totscore', 'adl.totscore', 'faq.totscore',
                   'sf36.pcs', 'sf36.mcs', 'frailty.fu')

## Which patients/time points have at least partial cognitive or functional data?
all.fu$has.cog.data <- rowSums(!is.na(all.fu[,cog.varnames])) > 0
all.fu$has.func.data <- rowSums(!is.na(all.fu[,func.varnames])) > 0

## Create indicators for whether patient is in cohort at each time
all.oneobs$cog.cohort.3 <-
  all.oneobs$id %in% subset(all.fu, fu.period == '3 Month' & has.cog.data)$id
all.oneobs$cog.cohort.12 <-
  all.oneobs$id %in% subset(all.fu, fu.period == '12 Month' & has.cog.data)$id
all.oneobs$func.cohort.3 <-
  all.oneobs$id %in% subset(all.fu, fu.period == '3 Month' & has.func.data)$id
all.oneobs$func.cohort.12 <-
  all.oneobs$id %in% subset(all.fu, fu.period == '12 Month' & has.func.data)$id

## -- Calculate summary values for each biomarker for each patient ----------------------------------
bio.summary.pt <- all.daily[,c('id', 'study.day', biomarker.vnames)] %>%
  gather(key = bio.marker, value = bio.value, crp.imp:tnfr1.imp) %>%
  filter(!is.na(bio.value)) %>%
  arrange(id, study.day) %>%
  group_by(id, bio.marker) %>%
  summarise(pt.n = sum(!is.na(bio.value)),
            pt.mean = mean(bio.value, na.rm = TRUE),
            pt.min = min(bio.value, na.rm = TRUE),
            pt.max = max(bio.value, na.rm = TRUE),
            pt.first = head(bio.value, n = 1),
            pt.last = tail(bio.value, n = 1),
            pt.auc = trapz(x = study.day, y = bio.value))
bio.summary.pt$pt.delta <- with(bio.summary.pt, ifelse(pt.n == 1, NA, pt.last - pt.first))
bio.summary.pt$pt.pctchg <-
  with(bio.summary.pt, ifelse(pt.n == 1, NA, ((pt.last - pt.first) / pt.first)))

## Transpose for one variable per summary measure per marker
bio.summary.wide <- bio.summary.pt %>%
  gather(key = 'measure', value = 'quantity', pt.n:pt.pctchg) %>%
  mutate(bio.vname = paste(gsub('\\.imp$', '', bio.marker),
                           gsub('^pt\\.', '', measure),
                           sep = '.')) %>%
  dplyr::select(-bio.marker, -measure) %>%
  spread(key = bio.vname, value = quantity)

## -- Calculate inverse probability weights for each survivor: --------------------------------------
## 1. Create aregImpute object to handle missing covariate data
## 2. Logistic regression, using "in cohort" as outcome
## 3. Get estimated probability for each person in cohort
## 4. Weight = 1 / estimated probability

## Create data set for imputation and modeling data
model.data <- subset(all.oneobs,
                     select = c(id, age.enroll, charlson.score, edu, iqcode.score.e, stroke.risk,
                                mean.benz.cube, mean.op.cube, mean.prop.cube, mean.dex.cube,
                                mean.hal.cube, adl.e, faq.e, frailty, icudays.sevseptic.s,
                                mean.modsofa.icu, del.s.imp, coma.s.imp, vent.los.tot.s,
                                cog.cohort.3, cog.cohort.12, func.cohort.3, func.cohort.12)) %>%
  left_join(bio.summary.wide, by = 'id')
dd <- datadist(model.data); options(datadist = 'dd')

## Create aregImpute object to use in weighting model
set.seed(1)
areg.weight <- aregImpute(~ age.enroll + charlson.score + I(edu) + I(iqcode.score.e) + stroke.risk +
                            mean.benz.cube + mean.op.cube + mean.prop.cube + I(mean.dex.cube) +
                            I(mean.hal.cube) + icudays.sevseptic.s + del.s.imp + coma.s.imp +
                            mean.modsofa.icu + crp.mean + ifngamma.mean + il10.mean + il12.mean +
                            il1b.mean + il6.mean + il8.mean + mmp9.mean + proteinc.mean + tnfa.mean +
                            tnfr1.mean,
                          n.impute = 10,
                          nk = 3,
                          data = model.data)

## Function to model P(being in cohort) using imputation
prob.cohort <- function(cohort.var){
  wtmod <- fit.mult.impute(formula = as.formula(paste(cohort.var,
                             "rcs(age.enroll, 3) + rcs(charlson.score, 3) + edu +
                              iqcode.score.e + rcs(stroke.risk, 3) +
                              rcs(mean.benz.cube, 3) + rcs(mean.op.cube, 3) +
                              rcs(mean.prop.cube, 3) + mean.dex.cube + mean.hal.cube +
                              rcs(icudays.sevseptic.s, 3) + rcs(del.s.imp, 3) +
                              rcs(coma.s.imp, 3) + rcs(mean.modsofa.icu, 3) +
                              rcs(crp.mean, 3) + rcs(ifngamma.mean, 3) +
                              rcs(il10.mean, 3) + rcs(il12.mean, 3) + rcs(il1b.mean, 3) +
                              rcs(il6.mean, 3) + il8.mean + rcs(mmp9.mean, 3) +
                              rcs(proteinc.mean, 3) + rcs(tnfa.mean, 3) + rcs(tnfr1.mean, 3)",
                            sep = ' ~ ')),
                            fitter = lrm,
                            xtrans = areg.weight,
                            data = model.data)
  predict(wtmod, type = 'fitted')
}

prob.cog.3 <- prob.cohort('cog.cohort.3')
prob.cog.12 <- prob.cohort('cog.cohort.12')
prob.func.3 <- prob.cohort('func.cohort.3')
prob.func.12 <- prob.cohort('func.cohort.12')

## Final weights = inverse of P(being in cohort)
model.data$wt.cog.3 <- 1 / prob.cog.3
model.data$wt.cog.12 <- 1 / prob.cog.12
model.data$wt.func.3 <- 1 / prob.func.3
model.data$wt.func.12 <- 1 / prob.func.12

# ## Checks for weights
# sum(subset(model.data, cog.cohort.3)$wt.cog.3)
# sum(subset(model.data, cog.cohort.12)$wt.cog.12)
# sum(subset(model.data, func.cohort.3)$wt.func.3)
# sum(subset(model.data, func.cohort.12)$wt.func.12)

# ## Check using plots
# ggplot(aes(x = cog.cohort.12, y = prob.cog.12), data = model.data) + geom_boxplot() + scale_y_continuous(limits = 0:1)

## -- Create data set with all covariates, test scores, weights ------------------------------------
## Transpose followup scores
model.fu.data <- all.fu %>%
  filter(fu.period %in% c('3 Month', '12 Month')) %>%
  dplyr::select(id, fu.period, rbans.global.score, trail.b.tscore, adl.totscore, faq.totscore) %>%
  separate(fu.period, into = c('month', 'text'), sep = ' ') %>%
  gather(key = 'test', value = 'score', rbans.global.score:faq.totscore) %>%
  mutate(test.month = paste(test, month, sep = '.')) %>%
  dplyr::select(-month, -text, -test) %>%
  spread(key = test.month, value = score)

## Create single data set
model.data <- model.data %>%
  left_join(model.fu.data, by = 'id')

## Add variable labels for tables
label(model.data$cog.cohort.3) <- 'In cognitive analysis cohort, 3m'
label(model.data$cog.cohort.12) <- 'In cognitive analysis cohort, 12m'
label(model.data$func.cohort.3) <- 'In functional analysis cohort, 3m'
label(model.data$func.cohort.12) <- 'In functional analysis cohort, 12m'
label(model.data$wt.cog.3) <- 'Model weight, cognitive cohort, 3m'
label(model.data$wt.cog.12) <- 'Model weight, cognitive cohort, 12m'
label(model.data$wt.func.3) <- 'Model weight, functional cohort, 3m'
label(model.data$wt.func.12) <- 'Model weight, functional cohort, 12m'
label(model.data$adl.totscore.3) <- 'ADL score, 3m'
label(model.data$adl.totscore.12) <- 'ADL score, 12m'
label(model.data$faq.totscore.3) <- 'FAQ score, 3m'
label(model.data$faq.totscore.12) <- 'FAQ score, 12m'
label(model.data$rbans.global.score.3) <- 'RBANS global score, 3m'
label(model.data$rbans.global.score.12) <- 'RBANS global score, 12m'
label(model.data$trail.b.tscore.3) <- 'Trails B T-score, 3m'
label(model.data$trail.b.tscore.12) <- 'Trails B T-score, 12m'

@

<<weighthist, results='asis', fig.cap='Histogram of Model Weights by Analysis Cohort', fig.align='center', fig.pos='!h', fig.width=5, fig.height=5>>=
## -- Create histograms for inverse probability weights, showing total N in each cohort ------------
## Data frame including variable names and axis labels to use in histograms
cohort.df <-
  data.frame(cohort.var = c('cog.cohort.3', 'cog.cohort.12', 'func.cohort.3', 'func.cohort.12'),
             wt.var = c('wt.cog.3', 'wt.cog.12', 'wt.func.3', 'wt.func.12'),
             xaxis.title = c('Cognitive Cohort, 3m', 'Cognitive Cohort, 12m',
                             'Functional Cohort, 3m', 'Functional Cohort, 12m'))

## Function to create histogram for a given cohort, weight variable and X axis label
create.wthist <- function(rownum){
  ## Get data needed, replace variable names with generics
  usedata <- model.data[,c(as.character(cohort.df$cohort.var[rownum]),
                           as.character(cohort.df$wt.var[rownum]))]
  names(usedata) <- c('cohort.var', 'wt.var')

  ## Create histogram
  ggplot(aes(x = wt.var), data = subset(usedata, cohort.var)) +
    geom_histogram(colour = NA, fill = 'navy', alpha = 0.8) +
    ## Add N to X axis label
    scale_x_continuous(limits = c(0, 12),
                       name = paste0(cohort.df$xaxis.title[rownum], '\nN = ',
                                     sum(usedata$cohort.var, na.rm = TRUE))) +
    scale_y_continuous(limits = c(0, 225), name = '') +
    theme_minimal() +
    theme(axis.text = element_text(colour = 'grey30', size = 7),
          axis.ticks = element_blank(),
          axis.title = element_text(size = 8))
}

## Create plot for each cohort, then plot in 2x2 matrix
wthist.list <- lapply(1:nrow(cohort.df), FUN = create.wthist)
multiplot(plotlist = wthist.list, layout = matrix(1:4, ncol = 2, byrow = TRUE))
@

<<biomodels>>=
## Create data sets with only patients in each cohort
model.data.cog.3 <- subset(model.data, cog.cohort.3)
model.data.cog.12 <- subset(model.data, cog.cohort.12)
model.data.func.3 <- subset(model.data, func.cohort.3)
model.data.func.12 <- subset(model.data, func.cohort.12)

## -- Create multiple imputation objects -----------------------------------------------------------
create.areg.obj <- function(cohort.data, marker.measure){
  areg.formula <-
    as.formula(paste0('~ ',
                      paste(c('age.enroll', 'charlson.score', 'I(iqcode.score.e)', 'stroke.risk',
                              'mean.benz.cube', 'mean.op.cube', 'mean.prop.cube', 'I(mean.dex.cube)',
                              'I(mean.hal.cube)', 'icudays.sevseptic.s', 'del.s.imp',
                              'as.numeric(frailty)', 'I(adl.e)', 'I(faq.e)',
                              gsub('\\.imp$', paste0('.', marker.measure), biomarker.vnames)),
                            collapse = ' + ')))

  set.seed(56)
  do.call('aregImpute',
          list(formula = areg.formula,
               n.impute = 10,
               nk = 3,
               data = cohort.data))
}

areg.cog.mean.3 <- create.areg.obj(model.data.cog.3, marker.measure = 'mean')
areg.cog.mean.12 <- create.areg.obj(model.data.cog.12, marker.measure = 'mean')
areg.cog.first.3 <- create.areg.obj(model.data.cog.3, marker.measure = 'first')
areg.cog.first.12 <- create.areg.obj(model.data.cog.12, marker.measure = 'first')
areg.cog.pctchg.3 <- create.areg.obj(model.data.cog.3, marker.measure = 'pctchg')
areg.cog.pctchg.12 <- create.areg.obj(model.data.cog.12, marker.measure = 'pctchg')

areg.func.mean.3 <- create.areg.obj(model.data.func.3, marker.measure = 'mean')
areg.func.mean.12 <- create.areg.obj(model.data.func.12, marker.measure = 'mean')
areg.func.first.3 <- create.areg.obj(model.data.func.3, marker.measure = 'first')
areg.func.first.12 <- create.areg.obj(model.data.func.12, marker.measure = 'first')
areg.func.pctchg.3 <- create.areg.obj(model.data.func.3, marker.measure = 'pctchg')
areg.func.pctchg.12 <- create.areg.obj(model.data.func.12, marker.measure = 'pctchg')

dd <- datadist(model.data); options(datadist = 'dd')

## For each model:
## 1. Run original model
## 2. Check model assumptions
## 3. Save results

## Initial setup: start formulas for each type of model
## Cognitive outcomes
covar.cog <- "rcs(age.enroll, 3) + rcs(charlson.score, 3) + rcs(edu, 3) + rcs(iqcode.score.e, 3) + rcs(stroke.risk, 3) + rcs(mean.benz.cube, 3) + rcs(mean.op.cube, 3) + rcs(mean.prop.cube, 3) + mean.dex.cube + mean.hal.cube + rcs(markervar, 3)"

## Functional outcomes
covar.func <- "rcs(age.enroll, 3) + rcs(charlson.score, 3) + rcs(edu, 3) + rcs(iqcode.score.e, 3) + rcs(stroke.risk, 3) + rcs(mean.benz.cube, 3) + rcs(mean.op.cube, 3) + rcs(mean.prop.cube, 3) + mean.dex.cube + mean.hal.cube + adl.e + faq.e + as.numeric(frailty) + rcs(markervar, 3)"

## Function to create model formulas
make.modform <- function(outcome, markervar, covarstring = c('covar.cog', 'covar.func')){
  paste(outcome, gsub('markervar', markervar, covarstring, fixed = TRUE), sep = ' ~ ')
}

## -- Function to run all models for a given biomarker ---------------------------------------------
## marker: string representing prefix for biomarker variable (eg, "crp")
## transmethod: method to transform biomarker variable, corresponding to function (eg, "log10")
run.marker.mods <- function(marker, transmethod = NULL){
  ## Create character string representing biomarker variable (+ transformation, if needed) to
  ## include in model formulas
  ## Currently, **no transformations** for % change - negative values create problems
  if(is.null(transmethod)){
    transmarker.mean <- paste0(marker, '.mean')
    transmarker.first <- paste0(marker, '.first')
    transmarker.pctchg <- paste0(marker, '.pctchg')
  } else{
    if(!exists(transmethod)){
      stop(paste(transmethod, 'is not a recognized function in R.'))
    } else{
      transmarker.mean <- paste0(transmethod, '(', marker, '.mean)')
      transmarker.first <- paste0(transmethod, '(', marker, '.first)')
      transmarker.pctchg <- paste0(marker, '.pctchg')
    }
  }

  ## RBANS global score ##
  ## Mean vs. RBANS
  mean.rbans3.form <-
    as.formula(make.modform('rbans.global.score.3', transmarker.mean, covar.cog))
  mean.rbans.nowt.3 <-
    fit.mult.impute(mean.rbans3.form, fitter = ols, xtrans = areg.cog.mean.3, data = model.data.cog.3)
  mean.rbans.wt.3 <-
    fit.mult.impute(mean.rbans3.form, fitter = ols.fix, xtrans = areg.cog.mean.3, weights = wt.cog.3,
                    data = model.data.cog.3)

  mean.rbans12.form <-
    as.formula(make.modform('rbans.global.score.12', transmarker.mean, covar.cog))
  mean.rbans.nowt.12 <-
    fit.mult.impute(mean.rbans12.form, fitter = ols, xtrans = areg.cog.mean.12, data = model.data.cog.12)
  mean.rbans.wt.12 <-
    fit.mult.impute(mean.rbans12.form, fitter = ols.fix, xtrans = areg.cog.mean.12, weights = wt.cog.12,
                    data = model.data.cog.12)

  ## First vs. RBANS
  first.rbans3.form <-
    as.formula(make.modform('rbans.global.score.3', transmarker.first, covar.cog))
  first.rbans.nowt.3 <-
    fit.mult.impute(first.rbans3.form, fitter = ols, xtrans = areg.cog.first.3, data = model.data.cog.3)
  first.rbans.wt.3 <-
    fit.mult.impute(first.rbans3.form, fitter = ols.fix, xtrans = areg.cog.first.3, weights = wt.cog.3,
                    data = model.data.cog.3)

  first.rbans12.form <-
    as.formula(make.modform('rbans.global.score.12', transmarker.first, covar.cog))
  first.rbans.nowt.12 <-
    fit.mult.impute(first.rbans12.form, fitter = ols, xtrans = areg.cog.first.12,
                    data = model.data.cog.12)
  first.rbans.wt.12 <-
    fit.mult.impute(first.rbans12.form, fitter = ols.fix, xtrans = areg.cog.first.12,
                    weights = wt.cog.12, data = model.data.cog.12)

  ## % change vs. RBANS
  pctchg.rbans3.form <-
    as.formula(make.modform('rbans.global.score.3', transmarker.pctchg, covar.cog))
  pctchg.rbans.nowt.3 <-
    fit.mult.impute(pctchg.rbans3.form, fitter = ols, xtrans = areg.cog.pctchg.3,
                    data = model.data.cog.3)
  pctchg.rbans.wt.3 <-
    fit.mult.impute(pctchg.rbans3.form, fitter = ols.fix, xtrans = areg.cog.pctchg.3,
                    weights = wt.cog.3, data = model.data.cog.3)

  pctchg.rbans12.form <-
    as.formula(make.modform('rbans.global.score.12', transmarker.pctchg, covar.cog))
  pctchg.rbans.nowt.12 <-
    fit.mult.impute(pctchg.rbans12.form, fitter = ols, xtrans = areg.cog.pctchg.12,
                    data = model.data.cog.12)
  pctchg.rbans.wt.12 <-
    fit.mult.impute(pctchg.rbans12.form, fitter = ols.fix, xtrans = areg.cog.pctchg.12,
                    weights = wt.cog.12, data = model.data.cog.12)

  ## Trails B T-score ##
  ## Mean vs. Trails B
  mean.trailb3.form <-
    as.formula(make.modform('trail.b.tscore.3', transmarker.mean, covar.cog))
  mean.trailb.nowt.3 <-
    fit.mult.impute(mean.trailb3.form, fitter = ols, xtrans = areg.cog.mean.3,
                    data = model.data.cog.3)
  mean.trailb.wt.3 <-
    fit.mult.impute(mean.trailb3.form, fitter = ols.fix, xtrans = areg.cog.mean.3,
                    weights = wt.cog.3,
                    data = model.data.cog.3)

  mean.trailb12.form <-
    as.formula(make.modform('trail.b.tscore.12', transmarker.mean, covar.cog))
  mean.trailb.nowt.12 <-
    fit.mult.impute(mean.trailb12.form, fitter = ols, xtrans = areg.cog.mean.12,
                    data = model.data.cog.12)
  mean.trailb.wt.12 <-
    fit.mult.impute(mean.trailb12.form, fitter = ols.fix, xtrans = areg.cog.mean.12, weights = wt.cog.12,
                    data = model.data.cog.12)

  ## First vs. Trails B
  first.trailb3.form <-
    as.formula(make.modform('trail.b.tscore.3', transmarker.first, covar.cog))
  first.trailb.nowt.3 <-
    fit.mult.impute(first.trailb3.form, fitter = ols, xtrans = areg.cog.first.3,
                    data = model.data.cog.3)
  first.trailb.wt.3 <-
    fit.mult.impute(first.trailb3.form, fitter = ols.fix, xtrans = areg.cog.first.3,
                    weights = wt.cog.3, data = model.data.cog.3)

  first.trailb12.form <-
    as.formula(make.modform('trail.b.tscore.12', transmarker.first, covar.cog))
  first.trailb.nowt.12 <-
    fit.mult.impute(first.trailb12.form, fitter = ols, xtrans = areg.cog.first.12,
                    data = model.data.cog.12)
  first.trailb.wt.12 <-
    fit.mult.impute(first.trailb12.form, fitter = ols.fix, xtrans = areg.cog.first.12,
                    weights = wt.cog.12, data = model.data.cog.12)

  ## % change vs. Trails B
  pctchg.trailb3.form <-
    as.formula(make.modform('trail.b.tscore.3', transmarker.pctchg, covar.cog))
  pctchg.trailb.nowt.3 <-
    fit.mult.impute(pctchg.trailb3.form, fitter = ols, xtrans = areg.cog.pctchg.3,
                    data = model.data.cog.3)
  pctchg.trailb.wt.3 <-
    fit.mult.impute(pctchg.trailb3.form, fitter = ols.fix, xtrans = areg.cog.pctchg.3,
                    weights = wt.cog.3, data = model.data.cog.3)

  pctchg.trailb12.form <-
    as.formula(make.modform('trail.b.tscore.12', transmarker.pctchg, covar.cog))
  pctchg.trailb.nowt.12 <-
    fit.mult.impute(pctchg.trailb12.form, fitter = ols, xtrans = areg.cog.pctchg.12,
                    data = model.data.cog.12)
  pctchg.trailb.wt.12 <-
    fit.mult.impute(pctchg.trailb12.form, fitter = ols.fix, xtrans = areg.cog.pctchg.12,
                    weights = wt.cog.12, data = model.data.cog.12)

  ## ADL score ##
  ## Mean vs. ADL score
  mean.adl3.form <- as.formula(make.modform('adl.totscore.3', transmarker.mean, covar.func))
  mean.adl.nowt.3 <-
    fit.mult.impute(mean.adl3.form, fitter = lrm, xtrans = areg.func.mean.3, data = model.data.func.3)
  mean.adl.wt.3 <-
    fit.mult.impute(mean.adl3.form, fitter = lrm.fix, xtrans = areg.func.mean.3, weights = wt.func.3,
                    data = model.data.func.3)

  mean.adl12.form <- as.formula(make.modform('adl.totscore.12', transmarker.mean, covar.func))
  mean.adl.nowt.12 <-
    fit.mult.impute(mean.adl12.form, fitter = lrm, xtrans = areg.func.mean.12, data = model.data.func.12)
  mean.adl.wt.12 <-
    fit.mult.impute(mean.adl12.form, fitter = lrm.fix, xtrans = areg.func.mean.12, weights = wt.func.12,
                    data = model.data.func.12)

  ## First vs. ADL
  first.adl3.form <- as.formula(make.modform('adl.totscore.3', transmarker.first, covar.func))
  first.adl.nowt.3 <-
    fit.mult.impute(first.adl3.form, fitter = lrm, xtrans = areg.func.first.3, data = model.data.func.3)
  first.adl.wt.3 <-
    fit.mult.impute(first.adl3.form, fitter = lrm.fix, xtrans = areg.func.first.3, weights = wt.func.3,
                    data = model.data.func.3)

  first.adl12.form <- as.formula(make.modform('adl.totscore.12', transmarker.first, covar.func))
  first.adl.nowt.12 <-
    fit.mult.impute(first.adl12.form, fitter = lrm, xtrans = areg.func.first.12, data = model.data.func.12)
  first.adl.wt.12 <-
    fit.mult.impute(first.adl12.form, fitter = lrm.fix, xtrans = areg.func.first.12, weights = wt.func.12,
                    data = model.data.func.12)

  ## % change vs. ADL
  pctchg.adl3.form <- as.formula(make.modform('adl.totscore.3', transmarker.pctchg, covar.func))
  pctchg.adl.nowt.3 <-
    fit.mult.impute(pctchg.adl3.form, fitter = lrm, xtrans = areg.func.pctchg.3, data = model.data.func.3)
  pctchg.adl.wt.3 <-
    fit.mult.impute(pctchg.adl3.form, fitter = lrm.fix, xtrans = areg.func.pctchg.3, weights = wt.func.3,
                    data = model.data.func.3)

  pctchg.adl12.form <- as.formula(make.modform('adl.totscore.12', transmarker.pctchg, covar.func))
  pctchg.adl.nowt.12 <-
    fit.mult.impute(pctchg.adl12.form, fitter = lrm, xtrans = areg.func.pctchg.12, data = model.data.func.12)
  pctchg.adl.wt.12 <-
    fit.mult.impute(pctchg.adl12.form, fitter = lrm.fix, xtrans = areg.func.pctchg.12, weights = wt.func.12,
                    data = model.data.func.12)

  ## FAQ score ##
  ## Mean vs. FAQ score
  mean.faq3.form <- as.formula(make.modform('faq.totscore.3', transmarker.mean, covar.func))
  mean.faq.nowt.3 <-
    fit.mult.impute(mean.faq3.form, fitter = lrm, xtrans = areg.func.mean.3, data = model.data.func.3)
  mean.faq.wt.3 <-
    fit.mult.impute(mean.faq3.form, fitter = lrm.fix, xtrans = areg.func.mean.3, weights = wt.func.3,
                    data = model.data.func.3)

  mean.faq12.form <- as.formula(make.modform('faq.totscore.12', transmarker.mean, covar.func))
  mean.faq.nowt.12 <-
    fit.mult.impute(mean.faq12.form, fitter = lrm, xtrans = areg.func.mean.12, data = model.data.func.12)
  mean.faq.wt.12 <-
    fit.mult.impute(mean.faq12.form, fitter = lrm.fix, xtrans = areg.func.mean.12, weights = wt.func.12,
                    data = model.data.func.12)

  ## First vs. FAQ
  first.faq3.form <- as.formula(make.modform('faq.totscore.3', transmarker.first, covar.func))
  first.faq.nowt.3 <-
    fit.mult.impute(first.faq3.form, fitter = lrm, xtrans = areg.func.first.3, data = model.data.func.3)
  first.faq.wt.3 <-
    fit.mult.impute(first.faq3.form, fitter = lrm.fix, xtrans = areg.func.first.3, weights = wt.func.3,
                    data = model.data.func.3)

  first.faq12.form <- as.formula(make.modform('faq.totscore.12', transmarker.first, covar.func))
  first.faq.nowt.12 <-
    fit.mult.impute(first.faq12.form, fitter = lrm, xtrans = areg.func.first.12, data = model.data.func.12)
  first.faq.wt.12 <-
    fit.mult.impute(first.faq12.form, fitter = lrm.fix, xtrans = areg.func.first.12, weights = wt.func.12,
                    data = model.data.func.12)

  ## % change vs. FAQ
  pctchg.faq3.form <- as.formula(make.modform('faq.totscore.3', transmarker.pctchg, covar.func))
  pctchg.faq.nowt.3 <-
    fit.mult.impute(pctchg.faq3.form, fitter = lrm, xtrans = areg.func.pctchg.3, data = model.data.func.3)
  pctchg.faq.wt.3 <-
    fit.mult.impute(pctchg.faq3.form, fitter = lrm.fix, xtrans = areg.func.pctchg.3, weights = wt.func.3,
                    data = model.data.func.3)

  pctchg.faq12.form <- as.formula(make.modform('faq.totscore.12', transmarker.pctchg, covar.func))
  pctchg.faq.nowt.12 <-
    fit.mult.impute(pctchg.faq12.form, fitter = lrm, xtrans = areg.func.pctchg.12, data = model.data.func.12)
  pctchg.faq.wt.12 <-
    fit.mult.impute(pctchg.faq12.form, fitter = lrm.fix, xtrans = areg.func.pctchg.12, weights = wt.func.12,
                    data = model.data.func.12)

  return(list('mean.rbans.nowt.3' = mean.rbans.nowt.3,
              'mean.rbans.wt.3' = mean.rbans.wt.3,
              'mean.rbans.nowt.12' = mean.rbans.nowt.12,
              'mean.rbans.wt.12' = mean.rbans.wt.12,
              'first.rbans.nowt.3' = first.rbans.nowt.3,
              'first.rbans.wt.3' = first.rbans.wt.3,
              'first.rbans.nowt.12' = first.rbans.nowt.12,
              'first.rbans.wt.12' = first.rbans.wt.12,
              'pctchg.rbans.nowt.3' = pctchg.rbans.nowt.3,
              'pctchg.rbans.wt.3' = pctchg.rbans.wt.3,
              'pctchg.rbans.nowt.12' = pctchg.rbans.nowt.12,
              'pctchg.rbans.wt.12' = pctchg.rbans.wt.12,
              'mean.trailb.nowt.3' = mean.trailb.nowt.3,
              'mean.trailb.wt.3' = mean.trailb.wt.3,
              'mean.trailb.nowt.12' = mean.trailb.nowt.12,
              'mean.trailb.wt.12' = mean.trailb.wt.12,
              'first.trailb.nowt.3' = first.trailb.nowt.3,
              'first.trailb.wt.3' = first.trailb.wt.3,
              'first.trailb.nowt.12' = first.trailb.nowt.12,
              'first.trailb.wt.12' = first.trailb.wt.12,
              'pctchg.trailb.nowt.3' = pctchg.trailb.nowt.3,
              'pctchg.trailb.wt.3' = pctchg.trailb.wt.3,
              'pctchg.trailb.nowt.12' = pctchg.trailb.nowt.12,
              'pctchg.trailb.wt.12' = pctchg.trailb.wt.12,
              'mean.adl.nowt.3' = mean.adl.nowt.3,
              'mean.adl.wt.3' = mean.adl.wt.3,
              'mean.adl.nowt.12' = mean.adl.nowt.12,
              'mean.adl.wt.12' = mean.adl.wt.12,
              'first.adl.nowt.3' = first.adl.nowt.3,
              'first.adl.wt.3' = first.adl.wt.3,
              'first.adl.nowt.12' = first.adl.nowt.12,
              'first.adl.wt.12' = first.adl.wt.12,
              'pctchg.adl.nowt.3' = pctchg.adl.nowt.3,
              'pctchg.adl.wt.3' = pctchg.adl.wt.3,
              'pctchg.adl.nowt.12' = pctchg.adl.nowt.12,
              'pctchg.adl.wt.12' = pctchg.adl.wt.12,
              'mean.faq.nowt.3' = mean.faq.nowt.3,
              'mean.faq.wt.3' = mean.faq.wt.3,
              'mean.faq.nowt.12' = mean.faq.nowt.12,
              'mean.faq.wt.12' = mean.faq.wt.12,
              'first.faq.nowt.3' = first.faq.nowt.3,
              'first.faq.wt.3' = first.faq.wt.3,
              'first.faq.nowt.12' = first.faq.nowt.12,
              'first.faq.wt.12' = first.faq.wt.12,
              'pctchg.faq.nowt.3' = pctchg.faq.nowt.3,
              'pctchg.faq.wt.3' = pctchg.faq.wt.3,
              'pctchg.faq.nowt.12' = pctchg.faq.nowt.12,
              'pctchg.faq.wt.12' = pctchg.faq.wt.12))
}

## Set character string variable for type of transformation
transtype <- 'log10'

crp.mods <- run.marker.mods('crp', transtype)
ifngamma.mods <- run.marker.mods('ifngamma', transtype)
il10.mods <- run.marker.mods('il10', transtype)
il12.mods <- run.marker.mods('il12', transtype)
il1b.mods <- run.marker.mods('il1b', transtype)
il6.mods <- run.marker.mods('il6', transtype)
il8.mods <- run.marker.mods('il8', transtype)
mmp9.mods <- run.marker.mods('mmp9', transtype)
proteinc.mods <- run.marker.mods('proteinc', transtype)
tnfa.mods <- run.marker.mods('tnfa', transtype)
tnfr1.mods <- run.marker.mods('tnfr1', transtype)

# ## -- Function to check linear model diagnostics ---------------------------------------------------
# check.diag.linear <- function(mod.list, time = c(3, 12), out.name, out.str, title.str = NULL){
#   ## If no title.str given, set to same as out.str
#   if(is.null(title.str)){ title.str <- out.str }
#
#   par(mfrow = c(3, 4), cex = 0.5, cex.main = 0.8)
#   ols.diagnostics(model.obj = mod.list[[match(paste0('mean.', out.name, '.nowt.', time),
#                                               names(mod.list))]],
#                   outcome.string = out.str,
#                   title.string = paste0(time, 'M ', out.str, ' vs Mean, No Weights'))
#   ols.diagnostics(model.obj = mod.list[[match(paste0('mean.', out.name, '.wt.', time),
#                                               names(mod.list))]],
#                   outcome.string = out.str,
#                   title.string = paste0(time, 'M ', out.str, ' vs Mean, With Weights'))
#   ols.diagnostics(model.obj = mod.list[[match(paste0('first.', out.name, '.nowt.', time),
#                                               names(mod.list))]],
#                   outcome.string = out.str,
#                   title.string = paste0(time, 'M ', out.str, ' vs First, No Weights'))
#   ols.diagnostics(model.obj = mod.list[[match(paste0('first.', out.name, '.wt.', time),
#                                               names(mod.list))]],
#                   outcome.string = out.str,
#                   title.string = paste0(time, 'M ', out.str, ' vs First, With Weights'))
#   ols.diagnostics(model.obj = mod.list[[match(paste0('pctchg.', out.name, '.nowt.', time),
#                                               names(mod.list))]],
#                   outcome.string = out.str,
#                   title.string = paste0(time, 'M ', out.str, ' vs % Change, No Weights'))
#   ols.diagnostics(model.obj = mod.list[[match(paste0('pctchg.', out.name, '.wt.', time),
#                                               names(mod.list))]],
#                   outcome.string = out.str,
#                   title.string = paste0(time, 'M ', out.str, ' vs % Change, With Weights'))
# }

## -- Check diagnostics -----------------------------------------------------------------------------
# ## CRP
# check.diag.linear(crp.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(crp.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(crp.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(crp.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IFN-gamma
# check.diag.linear(ifngamma.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(ifngamma.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(ifngamma.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(ifngamma.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-10
# check.diag.linear(il10.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il10.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il10.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il10.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-12
# check.diag.linear(il12.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il12.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il12.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il12.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-1b
# check.diag.linear(il1b.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il1b.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il1b.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il1b.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-6
# check.diag.linear(il6.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il6.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il6.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il6.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## IL-8
# check.diag.linear(il8.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il8.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(il8.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(il8.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## MMP9
# check.diag.linear(mmp9.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(mmp9.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(mmp9.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(mmp9.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## Protein C
# check.diag.linear(proteinc.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(proteinc.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(proteinc.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(proteinc.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## TNF-alpha
# check.diag.linear(tnfa.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(tnfa.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(tnfa.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(tnfa.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')
#
# ## TNFR1
# check.diag.linear(tnfr1.mods, time = 3, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(tnfr1.mods, time = 12, out.name = 'rbans', out.str = 'RBANS')
# check.diag.linear(tnfr1.mods, time = 3, out.name = 'trailb', out.str = 'Trails B')
# check.diag.linear(tnfr1.mods, time = 12, out.name = 'trailb', out.str = 'Trails B')

## -- Check assumptions for POLR models (ADL, FAQ) - unweighted versions only ----------------------
## Function to check assumptions for all unweighted models for a given biomarker and test
po.assume.markertest <- function(mod.list, marker, cut.seq, test){
  po.assume(model.obj = mod.list[[paste0('mean.', test, '.nowt.3')]],
            cuts = cut.seq, plot.vars = marker, model.data = model.data.func.3)
  po.assume(model.obj = mod.list[[paste0('mean.', test, '.nowt.12')]],
            cuts = cut.seq, plot.vars = marker, model.data = model.data.func.12)
}

## Set cuts for both tests
adl.cutseq <- seq(1, 8, 1)
faq.cutseq <- seq(1, 15, 2)

par(mfrow = c(2, 1))

## CRP
po.assume.markertest(mod.list = crp.mods, marker = 'crp', cut.seq = adl.cutseq, test = 'adl')
po.assume.markertest(mod.list = crp.mods, marker = 'crp', cut.seq = faq.cutseq, test = 'faq')

## IFN-gamma
po.assume.markertest(mod.list = ifngamma.mods, marker = 'ifngamma',
                     cut.seq = adl.cutseq, test = 'adl')
po.assume.markertest(mod.list = ifngamma.mods, marker = 'ifngamma',
                     cut.seq = faq.cutseq, test = 'faq')

## IL10
po.assume.markertest(mod.list = il10.mods, marker = 'il10', cut.seq = adl.cutseq, test = 'adl')
po.assume.markertest(mod.list = il10.mods, marker = 'il10', cut.seq = faq.cutseq, test = 'faq')

## IL12
po.assume.markertest(mod.list = il12.mods, marker = 'il12', cut.seq = adl.cutseq, test = 'adl')
po.assume.markertest(mod.list = il12.mods, marker = 'il12', cut.seq = faq.cutseq, test = 'faq')

## IL1b
po.assume.markertest(mod.list = il1b.mods, marker = 'il1b', cut.seq = adl.cutseq, test = 'adl')
po.assume.markertest(mod.list = il1b.mods, marker = 'il1b', cut.seq = faq.cutseq, test = 'faq')

## IL6
po.assume.markertest(mod.list = il6.mods, marker = 'il6', cut.seq = adl.cutseq, test = 'adl')
po.assume.markertest(mod.list = il6.mods, marker = 'il6', cut.seq = faq.cutseq, test = 'faq')

## IL8
po.assume.markertest(mod.list = il8.mods, marker = 'il8', cut.seq = adl.cutseq, test = 'adl')
po.assume.markertest(mod.list = il8.mods, marker = 'il8', cut.seq = faq.cutseq, test = 'faq')

## MMP9
po.assume.markertest(mod.list = mmp9.mods, marker = 'mmp9', cut.seq = adl.cutseq, test = 'adl')
po.assume.markertest(mod.list = mmp9.mods, marker = 'mmp9', cut.seq = faq.cutseq, test = 'faq')

## Protein C
po.assume.markertest(mod.list = proteinc.mods, marker = 'proteinc', cut.seq = adl.cutseq, test = 'adl')
po.assume.markertest(mod.list = proteinc.mods, marker = 'proteinc', cut.seq = faq.cutseq, test = 'faq')

## TNF-alpha
po.assume.markertest(mod.list = tnfa.mods, marker = 'tnfa', cut.seq = adl.cutseq, test = 'adl')
po.assume.markertest(mod.list = tnfa.mods, marker = 'tnfa', cut.seq = faq.cutseq, test = 'faq')

## TNFR1
po.assume.markertest(mod.list = tnfr1.mods, marker = 'tnfr1', cut.seq = adl.cutseq, test = 'adl')
po.assume.markertest(mod.list = tnfr1.mods, marker = 'tnfr1', cut.seq = faq.cutseq, test = 'faq')

@

<<getresults>>=
## Function to format and round number to the same number of digits
rndformat <- function(val, digits = 2){
  format(round(val, digits), nsmall = digits, big.mark = ',')
}

formatp <- function(val){
  ifelse(val < 0.0001, '<0.0001',
  ifelse(val < 0.001, '<0.001',
         rndformat(val, digits = 3)))
}

## Set datadist for summary.rms()
dd <- datadist(model.data); options(datadist = 'dd')

## -- Function to create results table ------------------------------------------------------------
create.results.table <- function(modlist, ## List of model objects (eg, crp.mods)
                                 marker,  ## string with marker prefix (eg, 'crp')
                                 test){   ## string indicating test of interest (eg, 'rbans')

  ## Create initial data frame with results from summary(), anova() for biomarker rows only
  ## For all models in model list with names containing "test",
  ##  take rows of summary() and anova() with rownames containing biomarker;
  ##  concatenate with name of model (eg, "mean.rbans.nowt.3")
  results.data <-
    as.data.frame(do.call(rbind,
                          lapply(grep(test, names(modlist)), FUN = function(x){
                            take.row.sum <- grep(marker, rownames(summary(modlist[[x]])))
                            take.row.anova <- grep(marker, rownames(anova(modlist[[x]])))
                            c(names(modlist)[x],
                              summary(modlist[[x]])[take.row.sum,
                                                    c('Low', 'High', 'Effect',
                                                      'Lower 0.95', 'Upper 0.95')],
                              anova(modlist[[x]])[take.row.anova, 'P'])
                          })))

  ## Set names of resulting data frame; make all variables numeric except model name
  names(results.data) <-
    c('which.mod', 'low', 'high', 'difference', 'lcl', 'ucl', 'pvalue')
  for(i in 2:ncol(results.data)){
    results.data[,i] <- as.numeric(as.character(results.data[,i]))
  }

  ## Reformat into data set with rows = number of biomarker measures,
  ##  cols = measure, reference, comparison, no weights/weights at 3 months,
  ##    no weights/weights at 12 months
  results.data <- results.data %>%
    separate(which.mod, into = c('measure', 'test', 'weight', 'time')) %>%
    mutate(measure.str = ifelse(measure == 'first', 'First',
                         ifelse(measure == 'mean', 'Mean', '\\% Change')),
           low = rndformat(low),
           high = rndformat(high),
           mod.type = paste(weight, time, sep = '.'),
           results.str = gsub(' +', ' ',
                              paste0(rndformat(difference),
                                     ' (', rndformat(lcl), ', ',
                                     rndformat(ucl), '); P = ',
                                     formatp(pvalue)))) %>%
    dplyr::select(measure.str, mod.type, low, high, results.str) %>%
    spread(key = mod.type, value = results.str)

  results.data[,c('measure.str', 'low', 'high', 'nowt.3', 'wt.3', 'nowt.12', 'wt.12')]
}

## -- Get all results for linear models ------------------------------------------------------------
crp.rbans.results <- create.results.table(modlist = crp.mods, marker = 'crp', 'rbans')
crp.trailb.results <- create.results.table(modlist = crp.mods, marker = 'crp', 'trailb')
ifngamma.rbans.results <- create.results.table(modlist = ifngamma.mods, marker = 'ifngamma', 'rbans')
ifngamma.trailb.results <- create.results.table(modlist = ifngamma.mods, marker = 'ifngamma', 'trailb')
il10.rbans.results <- create.results.table(modlist = il10.mods, marker = 'il10', 'rbans')
il10.trailb.results <- create.results.table(modlist = il10.mods, marker = 'il10', 'trailb')
il12.rbans.results <- create.results.table(modlist = il12.mods, marker = 'il12', 'rbans')
il12.trailb.results <- create.results.table(modlist = il12.mods, marker = 'il12', 'trailb')
il1b.rbans.results <- create.results.table(modlist = il1b.mods, marker = 'il1b', 'rbans')
il1b.trailb.results <- create.results.table(modlist = il1b.mods, marker = 'il1b', 'trailb')
il6.rbans.results <- create.results.table(modlist = il6.mods, marker = 'il6', 'rbans')
il6.trailb.results <- create.results.table(modlist = il6.mods, marker = 'il6', 'trailb')
il8.rbans.results <- create.results.table(modlist = il8.mods, marker = 'il8', 'rbans')
il8.trailb.results <- create.results.table(modlist = il8.mods, marker = 'il8', 'trailb')
mmp9.rbans.results <- create.results.table(modlist = mmp9.mods, marker = 'mmp9', 'rbans')
mmp9.trailb.results <- create.results.table(modlist = mmp9.mods, marker = 'mmp9', 'trailb')
proteinc.rbans.results <- create.results.table(modlist = proteinc.mods, marker = 'proteinc', 'rbans')
proteinc.trailb.results <- create.results.table(modlist = proteinc.mods, marker = 'proteinc', 'trailb')
tnfa.rbans.results <- create.results.table(modlist = tnfa.mods, marker = 'tnfa', 'rbans')
tnfa.trailb.results <- create.results.table(modlist = tnfa.mods, marker = 'tnfa', 'trailb')
tnfr1.rbans.results <- create.results.table(modlist = tnfr1.mods, marker = 'tnfr1', 'rbans')
tnfr1.trailb.results <- create.results.table(modlist = tnfr1.mods, marker = 'tnfr1', 'trailb')

## -- Function to print results tables in Latex ----------------------------------------------------
latex.results <- function(resultsdata, markerstr, teststr){
  latex(resultsdata, file = '',
        colheads = c('', 'Ref.', 'Comp.', 'No Weights', 'Weights', 'No Weights', 'Weights'),
        n.cgroup = c(1, 1, 1, 2, 2),
        cgroup = c('', '', '', '3-Month Scores', '12-Month Scores'),
        col.just = c('l', rep('r', ncol(resultsdata) - 1)),
        rowname = NULL,
        title = '',
        where = '!h',
        size = 'small',
        label = paste0('table:', tolower(markerstr), tolower(teststr)),
        caption = paste(markerstr, 'vs', teststr))
}

# ## Spot check a few models
# test1.nowt <- fit.mult.impute(as.formula(paste('rbans.global.score.3 ~',
#                                                gsub('markervar', 'tnfa.first', covar.cog,
#                                                     fixed = TRUE))),
#                               fitter = ols,
#                               xtrans = areg.cog.first.3,
#                               data = model.data.cog.3)
# anova(test1.nowt)
# anova(tnfa.mods$first.rbans.nowt.3)
# summary(test1.nowt)
# summary(tnfa.mods$first.rbans.nowt.3)
#
# test1.wt <- fit.mult.impute(as.formula(paste('rbans.global.score.3 ~',
#                                              gsub('markervar', 'tnfa.first', covar.cog,
#                                                   fixed = TRUE))),
#                             fitter = ols.fix,
#                             xtrans = areg.cog.first.3,
#                             weights = wt.cog.3,
#                             data = model.data.cog.3)
# anova(test1.wt)
# anova(tnfa.mods$first.rbans.wt.3)
# summary(test1.wt)
# summary(tnfa.mods$first.rbans.wt.3)
#
# ## Spot check a few models
# test2.nowt <- fit.mult.impute(as.formula(paste('trail.b.tscore.12 ~',
#                                                gsub('markervar', 'il10.pctchg', covar.cog,
#                                                     fixed = TRUE))),
#                               fitter = ols,
#                               xtrans = areg.cog.pctchg.12,
#                               data = model.data.cog.12)
# anova(test2.nowt)
# anova(il10.mods$pctchg.trailb.nowt.12)
# summary(test2.nowt)
# summary(il10.mods$pctchg.trailb.nowt.12)
#
# test2.wt <- fit.mult.impute(as.formula(paste('trail.b.tscore.12 ~',
#                                              gsub('markervar', 'il10.pctchg', covar.cog,
#                                                   fixed = TRUE))),
#                             fitter = ols.fix,
#                             xtrans = areg.cog.pctchg.12,
#                             weights = wt.cog.12,
#                             data = model.data.cog.12)
# anova(test2.wt)
# anova(il10.mods$pctchg.trailb.wt.12)
# summary(test2.wt)
# summary(il10.mods$pctchg.trailb.wt.12)

## Function to plot results from a model, weighted and non-weighted on the same panel
test.ylabs <- data.frame(testvar = c('rbans', 'trailb', 'adl', 'faq'),
                         testylab = c('Adjusted RBANS Global Score',
                                      'Adjusted Trails B T-Score',
                                      'Adjusted Prob. of Higher ADL Score',
                                      'Adjusted Prob. of Higher FAQ Score'))

plot.test.results <- function(modlist, ## List of model objects (eg, crp.mods)
                              test = c('rbans', 'trailb', 'adl', 'faq'), ## Test of interest
                              marker){ ## String; biomarker prefix (eg, 'crp')

  ## For all models in modlist which involve test of interest, get predicted values;
  ##  bind all predicted values in single data set, adding model name (eg,
  ##  mean.rbans.nowt.3) as variable
  pred.data <- bind_rows(lapply(grep(test, names(modlist)), FUN = function(x){

    markervar <- grep(marker, names(coef(modlist[[x]])), value = TRUE)[1]

    ## If model is looking at ADL or FAQ (POLR model), need predictions on probability scale
    if(test %in% c('adl', 'faq')){
      pred.eval <-
        paste('as.data.frame(Predict(modlist[[x]],', markervar, '= NA, fun = plogis))')
    } else{
      pred.eval <- paste('as.data.frame(Predict(modlist[[x]],', markervar, '= NA))')
    }
    tmp <- eval(parse(text = pred.eval))
    names(tmp) <- gsub(markervar, 'markervar', names(tmp))
    tmp$modtype <- names(modlist)[x]
    tmp
  })) %>%
    ## Separate model name variable into pieces and use to create factors for plotting
    separate(modtype, into = c('measure', 'test', 'weight', 'time')) %>%
    mutate(measurestr = factor(ifelse(measure == 'mean', 1,
                               ifelse(measure == 'first', 2, 3)),
                               levels = 1:3, labels = c('Mean', 'First', '% Change')),
           timestr = factor(ifelse(time == 3, 1, 2),
                            levels = 1:2, labels = c('3 Months', '12 Months')))

  ## Plot, with biomarker measures as columns and time points as rows
  marker.plot <- ggplot(aes(x = markervar), data = pred.data) +
    facet_grid(timestr ~ measurestr, scales = 'free_x') +
    geom_ribbon(aes(ymin = lower, ymax = upper, fill = weight), alpha = 0.4) +
    geom_line(aes(y = yhat, colour = weight)) +
    scale_colour_discrete(name = '', labels = c('Unweighted', 'Weighted')) +
    scale_fill_discrete(name = '', labels = c('Unweighted', 'Weighted')) +
    xlab(paste('Measure of', toupper(marker))) +
    ylab(test.ylabs[match(test, test.ylabs$testvar), 'testylab']) +
    theme_bw() +
    theme(legend.position = 'bottom',
          legend.key.size = unit(0.5, "cm"),
          legend.text = element_text(size = 8),
          axis.ticks = element_line(colour = 'grey50'),
          axis.text = element_text(size = 8),
          axis.title.x = element_text(vjust = 0),
          strip.background = element_blank(),
          panel.margin = unit(0.5, 'lines'))

  return(marker.plot)
}

@

\section{Biomarkers vs. LTCI Outcomes}
We used linear regression to examine the relationships between biomarkers, measured three different
ways, and RBANS and Trails B T-scores at 3- and 12-month followup. Summary results for each
association follow, with detailed model results to come. Point esimates (confidence limits)
represent the adjusted difference in test scores for a patient at the 75th vs. the 25th percentile
of the biomarker measure, assuming all other covariates are the same.

Models are performed using multiple imputation; all patients who had at least partial cognitive
testing data at a given time point are included in the models. All models included the following
covariates; with the exception of dexmedetomidine and haloperidol, which had too few unique values,
all continuous variables (including biomarker) were allowed to have a nonlinear association with the
outcome using restricted cubic splines. Mean and first biomarker were transformed by taking the base
10 logarithm, so that extremely high values did not cause problems with model convergence.

\begin{itemize}
\item Age at enrollment
\item Charlson score
\item Years of education
\item IQCODE score at enrollment
\item Framingham stroke risk score
\item Mean 24h doses of benzodiazepines (midazolam equivalents), opioids (fentanyl equivalents),
propofol, dexmedetomidine, and haloperidol in the ICU
\end{itemize}

\begin{landscape}
\subsection{CRP}
<<printcrprbansresults, results='asis', fig.cap = 'CRP vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = crp.mods, test = 'rbans', marker = 'crp'))
latex.results(crp.rbans.results, 'CRP', 'RBANS Global Scores')
@
\clearpage
<<printcrptrailbresults, results='asis', fig.cap = 'CRP vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = crp.mods, test = 'trailb', marker = 'crp'))
latex.results(crp.trailb.results, 'CRP', 'Trails B T-Scores')
@

\clearpage
\subsection{IFN-$\gamma$}
<<printifngammarbansresults, results='asis', fig.cap = 'IFN-gamma vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = ifngamma.mods, test = 'rbans', marker = 'ifngamma'))
latex.results(ifngamma.rbans.results, 'IFN-gamma', 'RBANS Global Scores')
@
\clearpage
<<printifngammatrailbresults, results='asis', fig.cap = 'IFN-gamma vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = ifngamma.mods, test = 'trailb', marker = 'ifngamma'))
latex.results(ifngamma.trailb.results, 'IFN-gamma', 'Trails B T-Scores')
@

\clearpage
\subsection{IL-10}
<<printil10rbansresults, results='asis', fig.cap = 'IL-10 vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = il10.mods, test = 'rbans', marker = 'il10'))
latex.results(il10.rbans.results, 'IL-10', 'RBANS Global Scores')
@
\clearpage
<<printil10trailbresults, results='asis', fig.cap = 'IL-10 vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = il10.mods, test = 'trailb', marker = 'il10'))
latex.results(il10.trailb.results, 'IL-10', 'Trails B T-Scores')
@

\clearpage
\subsection{IL-12}
<<printil12rbansresults, results='asis', fig.cap = 'IL-12 vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = il12.mods, test = 'rbans', marker = 'il12'))
latex.results(il12.rbans.results, 'IL-12', 'RBANS Global Scores')
@
\clearpage
<<printil12trailbresults, results='asis', fig.cap = 'IL-12 vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = il12.mods, test = 'trailb', marker = 'il12'))
latex.results(il12.trailb.results, 'IL-12', 'Trails B T-Scores')
@

\clearpage
\subsection{IL-1$\beta$}
<<printil1brbansresults, results='asis', fig.cap = 'IL-1b vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = il1b.mods, test = 'rbans', marker = 'il1b'))
latex.results(il1b.rbans.results, 'IL-1b', 'RBANS Global Scores')
@
\clearpage
<<printil1btrailbresults, results='asis', fig.cap = 'IL-1b vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = il1b.mods, test = 'trailb', marker = 'il1b'))
latex.results(il1b.trailb.results, 'IL-1b', 'Trails B T-Scores')
@

\clearpage
\subsection{IL-6}
<<printil6rbansresults, results='asis', fig.cap = 'IL-6 vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = il6.mods, test = 'rbans', marker = 'il6'))
latex.results(il6.rbans.results, 'IL-6', 'RBANS Global Scores')
@
\clearpage
<<printil6trailbresults, results='asis', fig.cap = 'IL-6 vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = il6.mods, test = 'trailb', marker = 'il6'))
latex.results(il6.trailb.results, 'IL-6', 'Trails B T-Scores')
@

\clearpage
\subsection{IL-8}
<<printil8rbansresults, results='asis', fig.cap = 'IL-8 vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = il8.mods, test = 'rbans', marker = 'il8'))
latex.results(il8.rbans.results, 'IL-8', 'RBANS Global Scores')
@
\clearpage
<<printil8trailbresults, results='asis', fig.cap = 'IL-8 vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = il8.mods, test = 'trailb', marker = 'il8'))
latex.results(il8.trailb.results, 'IL-8', 'Trails B T-Scores')
@

\clearpage
\subsection{MMP9}
<<printmmp9rbansresults, results='asis', fig.cap = 'MMP9 vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = mmp9.mods, test = 'rbans', marker = 'mmp9'))
latex.results(mmp9.rbans.results, 'MMP9', 'RBANS Global Scores')
@
\clearpage
<<printmmp9trailbresults, results='asis', fig.cap = 'MMP9 vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = mmp9.mods, test = 'trailb', marker = 'mmp9'))
latex.results(mmp9.trailb.results, 'MMP9', 'Trails B T-Scores')
@

\clearpage
\subsection{Protein C}
<<printproteincrbansresults, results='asis', fig.cap = 'Protein C vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = proteinc.mods, test = 'rbans', marker = 'proteinc'))
latex.results(proteinc.rbans.results, 'Protein C', 'RBANS Global Scores')
@
\clearpage
<<printproteinctrailbresults, results='asis', fig.cap = 'Protein C vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = proteinc.mods, test = 'trailb', marker = 'proteinc'))
latex.results(proteinc.trailb.results, 'Protein C', 'Trails B T-Scores')
@

\clearpage
\subsection{TNF$\alpha$}
<<printtnfarbansresults, results='asis', fig.cap = 'TNF-alpha vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = tnfa.mods, test = 'rbans', marker = 'tnfa'))
latex.results(tnfa.rbans.results, 'TNF-alpha', 'RBANS Global Scores')
@
\clearpage
<<printtnfatrailbresults, results='asis', fig.cap = 'TNF-alpha vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = tnfa.mods, test = 'trailb', marker = 'tnfa'))
latex.results(tnfa.trailb.results, 'TNF-alpha', 'Trails B T-Scores')
@

\clearpage
\subsection{TNFR1}
<<printtnfr1rbansresults, results='asis', fig.cap = 'TNFR1 vs. RBANS Global Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = tnfr1.mods, test = 'rbans', marker = 'tnfr1'))
latex.results(tnfr1.rbans.results, 'TNFR1', 'RBANS Global Scores')
@
\clearpage
<<printtnfr1trailbresults, results='asis', fig.cap = 'TNFR1 vs. Trails B T-Scores', fig.align = 'center', fig.width = 10, fig.height = 4, fig.pos = '!h'>>=
print(plot.test.results(modlist = tnfr1.mods, test = 'trailb', marker = 'tnfr1'))
latex.results(tnfr1.trailb.results, 'TNFR1', 'Trails B T-Scores')
@

\end{landscape}

\end{document}
